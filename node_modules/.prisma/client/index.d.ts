
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>
/**
 * Model Profiles
 * 
 */
export type Profiles = $Result.DefaultSelection<Prisma.$ProfilesPayload>
/**
 * Model Promotion
 * 
 */
export type Promotion = $Result.DefaultSelection<Prisma.$PromotionPayload>
/**
 * Model Referentiel
 * 
 */
export type Referentiel = $Result.DefaultSelection<Prisma.$ReferentielPayload>
/**
 * Model ProfilSortie
 * 
 */
export type ProfilSortie = $Result.DefaultSelection<Prisma.$ProfilSortiePayload>
/**
 * Model Competence
 * 
 */
export type Competence = $Result.DefaultSelection<Prisma.$CompetencePayload>
/**
 * Model Niveau
 * 
 */
export type Niveau = $Result.DefaultSelection<Prisma.$NiveauPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatutUtilisateur: {
  actif: 'actif',
  abandon: 'abandon',
  renvoyer: 'renvoyer',
  decede: 'decede',
  suspendu: 'suspendu'
};

export type StatutUtilisateur = (typeof StatutUtilisateur)[keyof typeof StatutUtilisateur]

}

export type StatutUtilisateur = $Enums.StatutUtilisateur

export const StatutUtilisateur: typeof $Enums.StatutUtilisateur

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilisateurs
 * const utilisateurs = await prisma.utilisateur.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilisateurs
   * const utilisateurs = await prisma.utilisateur.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **Profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.ProfilesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promotion`: Exposes CRUD operations for the **Promotion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promotions
    * const promotions = await prisma.promotion.findMany()
    * ```
    */
  get promotion(): Prisma.PromotionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referentiel`: Exposes CRUD operations for the **Referentiel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referentiels
    * const referentiels = await prisma.referentiel.findMany()
    * ```
    */
  get referentiel(): Prisma.ReferentielDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profilSortie`: Exposes CRUD operations for the **ProfilSortie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilSorties
    * const profilSorties = await prisma.profilSortie.findMany()
    * ```
    */
  get profilSortie(): Prisma.ProfilSortieDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.competence`: Exposes CRUD operations for the **Competence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competences
    * const competences = await prisma.competence.findMany()
    * ```
    */
  get competence(): Prisma.CompetenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.niveau`: Exposes CRUD operations for the **Niveau** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Niveaus
    * const niveaus = await prisma.niveau.findMany()
    * ```
    */
  get niveau(): Prisma.NiveauDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilisateur: 'Utilisateur',
    Profiles: 'Profiles',
    Promotion: 'Promotion',
    Referentiel: 'Referentiel',
    ProfilSortie: 'ProfilSortie',
    Competence: 'Competence',
    Niveau: 'Niveau',
    Tag: 'Tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "utilisateur" | "profiles" | "promotion" | "referentiel" | "profilSortie" | "competence" | "niveau" | "tag"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UtilisateurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UtilisateurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
      Profiles: {
        payload: Prisma.$ProfilesPayload<ExtArgs>
        fields: Prisma.ProfilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          findFirst: {
            args: Prisma.ProfilesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          findMany: {
            args: Prisma.ProfilesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>[]
          }
          create: {
            args: Prisma.ProfilesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          createMany: {
            args: Prisma.ProfilesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfilesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>[]
          }
          delete: {
            args: Prisma.ProfilesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          update: {
            args: Prisma.ProfilesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          deleteMany: {
            args: Prisma.ProfilesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfilesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>[]
          }
          upsert: {
            args: Prisma.ProfilesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          aggregate: {
            args: Prisma.ProfilesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfiles>
          }
          groupBy: {
            args: Prisma.ProfilesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilesCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilesCountAggregateOutputType> | number
          }
        }
      }
      Promotion: {
        payload: Prisma.$PromotionPayload<ExtArgs>
        fields: Prisma.PromotionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromotionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromotionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          findFirst: {
            args: Prisma.PromotionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromotionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          findMany: {
            args: Prisma.PromotionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>[]
          }
          create: {
            args: Prisma.PromotionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          createMany: {
            args: Prisma.PromotionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromotionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>[]
          }
          delete: {
            args: Prisma.PromotionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          update: {
            args: Prisma.PromotionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          deleteMany: {
            args: Prisma.PromotionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromotionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PromotionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>[]
          }
          upsert: {
            args: Prisma.PromotionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          aggregate: {
            args: Prisma.PromotionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotion>
          }
          groupBy: {
            args: Prisma.PromotionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromotionCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionCountAggregateOutputType> | number
          }
        }
      }
      Referentiel: {
        payload: Prisma.$ReferentielPayload<ExtArgs>
        fields: Prisma.ReferentielFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferentielFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferentielFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          findFirst: {
            args: Prisma.ReferentielFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferentielFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          findMany: {
            args: Prisma.ReferentielFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>[]
          }
          create: {
            args: Prisma.ReferentielCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          createMany: {
            args: Prisma.ReferentielCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferentielCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>[]
          }
          delete: {
            args: Prisma.ReferentielDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          update: {
            args: Prisma.ReferentielUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          deleteMany: {
            args: Prisma.ReferentielDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferentielUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferentielUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>[]
          }
          upsert: {
            args: Prisma.ReferentielUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          aggregate: {
            args: Prisma.ReferentielAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferentiel>
          }
          groupBy: {
            args: Prisma.ReferentielGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferentielGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferentielCountArgs<ExtArgs>
            result: $Utils.Optional<ReferentielCountAggregateOutputType> | number
          }
        }
      }
      ProfilSortie: {
        payload: Prisma.$ProfilSortiePayload<ExtArgs>
        fields: Prisma.ProfilSortieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilSortieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilSortieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          findFirst: {
            args: Prisma.ProfilSortieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilSortieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          findMany: {
            args: Prisma.ProfilSortieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>[]
          }
          create: {
            args: Prisma.ProfilSortieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          createMany: {
            args: Prisma.ProfilSortieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfilSortieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>[]
          }
          delete: {
            args: Prisma.ProfilSortieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          update: {
            args: Prisma.ProfilSortieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          deleteMany: {
            args: Prisma.ProfilSortieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilSortieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfilSortieUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>[]
          }
          upsert: {
            args: Prisma.ProfilSortieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          aggregate: {
            args: Prisma.ProfilSortieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfilSortie>
          }
          groupBy: {
            args: Prisma.ProfilSortieGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilSortieGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilSortieCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilSortieCountAggregateOutputType> | number
          }
        }
      }
      Competence: {
        payload: Prisma.$CompetencePayload<ExtArgs>
        fields: Prisma.CompetenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          findFirst: {
            args: Prisma.CompetenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          findMany: {
            args: Prisma.CompetenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>[]
          }
          create: {
            args: Prisma.CompetenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          createMany: {
            args: Prisma.CompetenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>[]
          }
          delete: {
            args: Prisma.CompetenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          update: {
            args: Prisma.CompetenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          deleteMany: {
            args: Prisma.CompetenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompetenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>[]
          }
          upsert: {
            args: Prisma.CompetenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          aggregate: {
            args: Prisma.CompetenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetence>
          }
          groupBy: {
            args: Prisma.CompetenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetenceCountArgs<ExtArgs>
            result: $Utils.Optional<CompetenceCountAggregateOutputType> | number
          }
        }
      }
      Niveau: {
        payload: Prisma.$NiveauPayload<ExtArgs>
        fields: Prisma.NiveauFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NiveauFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NiveauFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          findFirst: {
            args: Prisma.NiveauFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NiveauFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          findMany: {
            args: Prisma.NiveauFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>[]
          }
          create: {
            args: Prisma.NiveauCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          createMany: {
            args: Prisma.NiveauCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NiveauCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>[]
          }
          delete: {
            args: Prisma.NiveauDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          update: {
            args: Prisma.NiveauUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          deleteMany: {
            args: Prisma.NiveauDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NiveauUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NiveauUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>[]
          }
          upsert: {
            args: Prisma.NiveauUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          aggregate: {
            args: Prisma.NiveauAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNiveau>
          }
          groupBy: {
            args: Prisma.NiveauGroupByArgs<ExtArgs>
            result: $Utils.Optional<NiveauGroupByOutputType>[]
          }
          count: {
            args: Prisma.NiveauCountArgs<ExtArgs>
            result: $Utils.Optional<NiveauCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    utilisateur?: UtilisateurOmit
    profiles?: ProfilesOmit
    promotion?: PromotionOmit
    referentiel?: ReferentielOmit
    profilSortie?: ProfilSortieOmit
    competence?: CompetenceOmit
    niveau?: NiveauOmit
    tag?: TagOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfilesCountOutputType
   */

  export type ProfilesCountOutputType = {
    utilisateurs: number
  }

  export type ProfilesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateurs?: boolean | ProfilesCountOutputTypeCountUtilisateursArgs
  }

  // Custom InputTypes
  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilesCountOutputType
     */
    select?: ProfilesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeCountUtilisateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
  }


  /**
   * Count Type PromotionCountOutputType
   */

  export type PromotionCountOutputType = {
    referentiels: number
  }

  export type PromotionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiels?: boolean | PromotionCountOutputTypeCountReferentielsArgs
  }

  // Custom InputTypes
  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCountOutputType
     */
    select?: PromotionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeCountReferentielsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferentielWhereInput
  }


  /**
   * Count Type ReferentielCountOutputType
   */

  export type ReferentielCountOutputType = {
    profilsSortie: number
  }

  export type ReferentielCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profilsSortie?: boolean | ReferentielCountOutputTypeCountProfilsSortieArgs
  }

  // Custom InputTypes
  /**
   * ReferentielCountOutputType without action
   */
  export type ReferentielCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCountOutputType
     */
    select?: ReferentielCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReferentielCountOutputType without action
   */
  export type ReferentielCountOutputTypeCountProfilsSortieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilSortieWhereInput
  }


  /**
   * Count Type CompetenceCountOutputType
   */

  export type CompetenceCountOutputType = {
    niveaux: number
    tags: number
  }

  export type CompetenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    niveaux?: boolean | CompetenceCountOutputTypeCountNiveauxArgs
    tags?: boolean | CompetenceCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceCountOutputType
     */
    select?: CompetenceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeCountNiveauxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NiveauWhereInput
  }

  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    id: number | null
    profileId: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    password: string | null
    login: string | null
    statut: $Enums.StatutUtilisateur | null
    profileId: number | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    password: string | null
    login: string | null
    statut: $Enums.StatutUtilisateur | null
    profileId: number | null
  }

  export type UtilisateurCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    password: number
    login: number
    statut: number
    profileId: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type UtilisateurSumAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type UtilisateurMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    login?: true
    statut?: true
    profileId?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    login?: true
    statut?: true
    profileId?: true
  }

  export type UtilisateurCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    login?: true
    statut?: true
    profileId?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
    profileId: number
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    login?: boolean
    statut?: boolean
    profileId?: boolean
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    login?: boolean
    statut?: boolean
    profileId?: boolean
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    login?: boolean
    statut?: boolean
    profileId?: boolean
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    login?: boolean
    statut?: boolean
    profileId?: boolean
  }

  export type UtilisateurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "prenom" | "email" | "password" | "login" | "statut" | "profileId", ExtArgs["result"]["utilisateur"]>
  export type UtilisateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
  }
  export type UtilisateurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
  }
  export type UtilisateurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
  }

  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {
      profile: Prisma.$ProfilesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      email: string
      password: string
      login: string
      statut: $Enums.StatutUtilisateur
      profileId: number
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }

  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UtilisateurFindUniqueArgs>(args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Utilisateur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs>(args: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UtilisateurFindFirstArgs>(args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs>(args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UtilisateurFindManyArgs>(args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
     */
    create<T extends UtilisateurCreateArgs>(args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Utilisateurs.
     * @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UtilisateurCreateManyArgs>(args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Utilisateurs and returns the data saved in the database.
     * @param {UtilisateurCreateManyAndReturnArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Utilisateurs and only return the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UtilisateurCreateManyAndReturnArgs>(args?: SelectSubset<T, UtilisateurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
     */
    delete<T extends UtilisateurDeleteArgs>(args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UtilisateurUpdateArgs>(args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UtilisateurDeleteManyArgs>(args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UtilisateurUpdateManyArgs>(args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs and returns the data updated in the database.
     * @param {UtilisateurUpdateManyAndReturnArgs} args - Arguments to update many Utilisateurs.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Utilisateurs and only return the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UtilisateurUpdateManyAndReturnArgs>(args: SelectSubset<T, UtilisateurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
     */
    upsert<T extends UtilisateurUpsertArgs>(args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfilesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfilesDefaultArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Utilisateur model
   */
  interface UtilisateurFieldRefs {
    readonly id: FieldRef<"Utilisateur", 'Int'>
    readonly nom: FieldRef<"Utilisateur", 'String'>
    readonly prenom: FieldRef<"Utilisateur", 'String'>
    readonly email: FieldRef<"Utilisateur", 'String'>
    readonly password: FieldRef<"Utilisateur", 'String'>
    readonly login: FieldRef<"Utilisateur", 'String'>
    readonly statut: FieldRef<"Utilisateur", 'StatutUtilisateur'>
    readonly profileId: FieldRef<"Utilisateur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }

  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
  }

  /**
   * Utilisateur createManyAndReturn
   */
  export type UtilisateurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
    /**
     * Limit how many Utilisateurs to update.
     */
    limit?: number
  }

  /**
   * Utilisateur updateManyAndReturn
   */
  export type UtilisateurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
    /**
     * Limit how many Utilisateurs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }

  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
    /**
     * Limit how many Utilisateurs to delete.
     */
    limit?: number
  }

  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
  }


  /**
   * Model Profiles
   */

  export type AggregateProfiles = {
    _count: ProfilesCountAggregateOutputType | null
    _avg: ProfilesAvgAggregateOutputType | null
    _sum: ProfilesSumAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfilesSumAggregateOutputType = {
    id: number | null
  }

  export type ProfilesMinAggregateOutputType = {
    id: number | null
    libelle: string | null
  }

  export type ProfilesMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
  }

  export type ProfilesCountAggregateOutputType = {
    id: number
    libelle: number
    _all: number
  }


  export type ProfilesAvgAggregateInputType = {
    id?: true
  }

  export type ProfilesSumAggregateInputType = {
    id?: true
  }

  export type ProfilesMinAggregateInputType = {
    id?: true
    libelle?: true
  }

  export type ProfilesMaxAggregateInputType = {
    id?: true
    libelle?: true
  }

  export type ProfilesCountAggregateInputType = {
    id?: true
    libelle?: true
    _all?: true
  }

  export type ProfilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to aggregate.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends ProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfiles[P]>
      : GetScalarType<T[P], AggregateProfiles[P]>
  }




  export type ProfilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilesWhereInput
    orderBy?: ProfilesOrderByWithAggregationInput | ProfilesOrderByWithAggregationInput[]
    by: ProfilesScalarFieldEnum[] | ProfilesScalarFieldEnum
    having?: ProfilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilesCountAggregateInputType | true
    _avg?: ProfilesAvgAggregateInputType
    _sum?: ProfilesSumAggregateInputType
    _min?: ProfilesMinAggregateInputType
    _max?: ProfilesMaxAggregateInputType
  }

  export type ProfilesGroupByOutputType = {
    id: number
    libelle: string
    _count: ProfilesCountAggregateOutputType | null
    _avg: ProfilesAvgAggregateOutputType | null
    _sum: ProfilesSumAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  type GetProfilesGroupByPayload<T extends ProfilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
        }
      >
    >


  export type ProfilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    utilisateurs?: boolean | Profiles$utilisateursArgs<ExtArgs>
    _count?: boolean | ProfilesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profiles"]>

  export type ProfilesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
  }, ExtArgs["result"]["profiles"]>

  export type ProfilesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
  }, ExtArgs["result"]["profiles"]>

  export type ProfilesSelectScalar = {
    id?: boolean
    libelle?: boolean
  }

  export type ProfilesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "libelle", ExtArgs["result"]["profiles"]>
  export type ProfilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateurs?: boolean | Profiles$utilisateursArgs<ExtArgs>
    _count?: boolean | ProfilesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfilesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfilesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profiles"
    objects: {
      utilisateurs: Prisma.$UtilisateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
    }, ExtArgs["result"]["profiles"]>
    composites: {}
  }

  type ProfilesGetPayload<S extends boolean | null | undefined | ProfilesDefaultArgs> = $Result.GetResult<Prisma.$ProfilesPayload, S>

  type ProfilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilesCountAggregateInputType | true
    }

  export interface ProfilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profiles'], meta: { name: 'Profiles' } }
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {ProfilesFindUniqueArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilesFindUniqueArgs>(args: SelectSubset<T, ProfilesFindUniqueArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profiles that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilesFindUniqueOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilesFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilesFindFirstArgs>(args?: SelectSubset<T, ProfilesFindFirstArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profiles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilesFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilesWithIdOnly = await prisma.profiles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilesFindManyArgs>(args?: SelectSubset<T, ProfilesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profiles.
     * @param {ProfilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
     */
    create<T extends ProfilesCreateArgs>(args: SelectSubset<T, ProfilesCreateArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfilesCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profiles = await prisma.profiles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilesCreateManyArgs>(args?: SelectSubset<T, ProfilesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfilesCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profiles = await prisma.profiles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profilesWithIdOnly = await prisma.profiles.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfilesCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfilesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profiles.
     * @param {ProfilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
     */
    delete<T extends ProfilesDeleteArgs>(args: SelectSubset<T, ProfilesDeleteArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profiles.
     * @param {ProfilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilesUpdateArgs>(args: SelectSubset<T, ProfilesUpdateArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilesDeleteManyArgs>(args?: SelectSubset<T, ProfilesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilesUpdateManyArgs>(args: SelectSubset<T, ProfilesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfilesUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profilesWithIdOnly = await prisma.profiles.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfilesUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfilesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profiles.
     * @param {ProfilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
     */
    upsert<T extends ProfilesUpsertArgs>(args: SelectSubset<T, ProfilesUpsertArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfilesCountArgs>(
      args?: Subset<T, ProfilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilesAggregateArgs>(args: Subset<T, ProfilesAggregateArgs>): Prisma.PrismaPromise<GetProfilesAggregateType<T>>

    /**
     * Group by Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilesGroupByArgs['orderBy'] }
        : { orderBy?: ProfilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profiles model
   */
  readonly fields: ProfilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateurs<T extends Profiles$utilisateursArgs<ExtArgs> = {}>(args?: Subset<T, Profiles$utilisateursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profiles model
   */
  interface ProfilesFieldRefs {
    readonly id: FieldRef<"Profiles", 'Int'>
    readonly libelle: FieldRef<"Profiles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profiles findUnique
   */
  export type ProfilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where: ProfilesWhereUniqueInput
  }

  /**
   * Profiles findUniqueOrThrow
   */
  export type ProfilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where: ProfilesWhereUniqueInput
  }

  /**
   * Profiles findFirst
   */
  export type ProfilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * Profiles findFirstOrThrow
   */
  export type ProfilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * Profiles findMany
   */
  export type ProfilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }

  /**
   * Profiles create
   */
  export type ProfilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The data needed to create a Profiles.
     */
    data: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
  }

  /**
   * Profiles createMany
   */
  export type ProfilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfilesCreateManyInput | ProfilesCreateManyInput[]
  }

  /**
   * Profiles createManyAndReturn
   */
  export type ProfilesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfilesCreateManyInput | ProfilesCreateManyInput[]
  }

  /**
   * Profiles update
   */
  export type ProfilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The data needed to update a Profiles.
     */
    data: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
    /**
     * Choose, which Profiles to update.
     */
    where: ProfilesWhereUniqueInput
  }

  /**
   * Profiles updateMany
   */
  export type ProfilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfilesWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profiles updateManyAndReturn
   */
  export type ProfilesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfilesWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profiles upsert
   */
  export type ProfilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The filter to search for the Profiles to update in case it exists.
     */
    where: ProfilesWhereUniqueInput
    /**
     * In case the Profiles found by the `where` argument doesn't exist, create a new Profiles with this data.
     */
    create: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
    /**
     * In case the Profiles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
  }

  /**
   * Profiles delete
   */
  export type ProfilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter which Profiles to delete.
     */
    where: ProfilesWhereUniqueInput
  }

  /**
   * Profiles deleteMany
   */
  export type ProfilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfilesWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profiles.utilisateurs
   */
  export type Profiles$utilisateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Utilisateur
     */
    omit?: UtilisateurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    cursor?: UtilisateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Profiles without action
   */
  export type ProfilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profiles
     */
    omit?: ProfilesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilesInclude<ExtArgs> | null
  }


  /**
   * Model Promotion
   */

  export type AggregatePromotion = {
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  export type PromotionAvgAggregateOutputType = {
    id: number | null
  }

  export type PromotionSumAggregateOutputType = {
    id: number | null
  }

  export type PromotionMinAggregateOutputType = {
    id: number | null
    date_debut: Date | null
    duree: string | null
  }

  export type PromotionMaxAggregateOutputType = {
    id: number | null
    date_debut: Date | null
    duree: string | null
  }

  export type PromotionCountAggregateOutputType = {
    id: number
    date_debut: number
    duree: number
    _all: number
  }


  export type PromotionAvgAggregateInputType = {
    id?: true
  }

  export type PromotionSumAggregateInputType = {
    id?: true
  }

  export type PromotionMinAggregateInputType = {
    id?: true
    date_debut?: true
    duree?: true
  }

  export type PromotionMaxAggregateInputType = {
    id?: true
    date_debut?: true
    duree?: true
  }

  export type PromotionCountAggregateInputType = {
    id?: true
    date_debut?: true
    duree?: true
    _all?: true
  }

  export type PromotionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promotion to aggregate.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Promotions
    **/
    _count?: true | PromotionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionMaxAggregateInputType
  }

  export type GetPromotionAggregateType<T extends PromotionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotion[P]>
      : GetScalarType<T[P], AggregatePromotion[P]>
  }




  export type PromotionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionWhereInput
    orderBy?: PromotionOrderByWithAggregationInput | PromotionOrderByWithAggregationInput[]
    by: PromotionScalarFieldEnum[] | PromotionScalarFieldEnum
    having?: PromotionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionCountAggregateInputType | true
    _avg?: PromotionAvgAggregateInputType
    _sum?: PromotionSumAggregateInputType
    _min?: PromotionMinAggregateInputType
    _max?: PromotionMaxAggregateInputType
  }

  export type PromotionGroupByOutputType = {
    id: number
    date_debut: Date
    duree: string
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  type GetPromotionGroupByPayload<T extends PromotionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionGroupByOutputType[P]>
        }
      >
    >


  export type PromotionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date_debut?: boolean
    duree?: boolean
    referentiels?: boolean | Promotion$referentielsArgs<ExtArgs>
    _count?: boolean | PromotionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotion"]>

  export type PromotionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date_debut?: boolean
    duree?: boolean
  }, ExtArgs["result"]["promotion"]>

  export type PromotionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date_debut?: boolean
    duree?: boolean
  }, ExtArgs["result"]["promotion"]>

  export type PromotionSelectScalar = {
    id?: boolean
    date_debut?: boolean
    duree?: boolean
  }

  export type PromotionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date_debut" | "duree", ExtArgs["result"]["promotion"]>
  export type PromotionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiels?: boolean | Promotion$referentielsArgs<ExtArgs>
    _count?: boolean | PromotionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PromotionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PromotionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PromotionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Promotion"
    objects: {
      referentiels: Prisma.$ReferentielPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date_debut: Date
      duree: string
    }, ExtArgs["result"]["promotion"]>
    composites: {}
  }

  type PromotionGetPayload<S extends boolean | null | undefined | PromotionDefaultArgs> = $Result.GetResult<Prisma.$PromotionPayload, S>

  type PromotionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromotionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromotionCountAggregateInputType | true
    }

  export interface PromotionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Promotion'], meta: { name: 'Promotion' } }
    /**
     * Find zero or one Promotion that matches the filter.
     * @param {PromotionFindUniqueArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromotionFindUniqueArgs>(args: SelectSubset<T, PromotionFindUniqueArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Promotion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromotionFindUniqueOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromotionFindUniqueOrThrowArgs>(args: SelectSubset<T, PromotionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promotion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionFindFirstArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromotionFindFirstArgs>(args?: SelectSubset<T, PromotionFindFirstArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promotion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionFindFirstOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromotionFindFirstOrThrowArgs>(args?: SelectSubset<T, PromotionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Promotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promotions
     * const promotions = await prisma.promotion.findMany()
     * 
     * // Get first 10 Promotions
     * const promotions = await prisma.promotion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionWithIdOnly = await prisma.promotion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromotionFindManyArgs>(args?: SelectSubset<T, PromotionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Promotion.
     * @param {PromotionCreateArgs} args - Arguments to create a Promotion.
     * @example
     * // Create one Promotion
     * const Promotion = await prisma.promotion.create({
     *   data: {
     *     // ... data to create a Promotion
     *   }
     * })
     * 
     */
    create<T extends PromotionCreateArgs>(args: SelectSubset<T, PromotionCreateArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Promotions.
     * @param {PromotionCreateManyArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromotionCreateManyArgs>(args?: SelectSubset<T, PromotionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Promotions and returns the data saved in the database.
     * @param {PromotionCreateManyAndReturnArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Promotions and only return the `id`
     * const promotionWithIdOnly = await prisma.promotion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromotionCreateManyAndReturnArgs>(args?: SelectSubset<T, PromotionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Promotion.
     * @param {PromotionDeleteArgs} args - Arguments to delete one Promotion.
     * @example
     * // Delete one Promotion
     * const Promotion = await prisma.promotion.delete({
     *   where: {
     *     // ... filter to delete one Promotion
     *   }
     * })
     * 
     */
    delete<T extends PromotionDeleteArgs>(args: SelectSubset<T, PromotionDeleteArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Promotion.
     * @param {PromotionUpdateArgs} args - Arguments to update one Promotion.
     * @example
     * // Update one Promotion
     * const promotion = await prisma.promotion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromotionUpdateArgs>(args: SelectSubset<T, PromotionUpdateArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Promotions.
     * @param {PromotionDeleteManyArgs} args - Arguments to filter Promotions to delete.
     * @example
     * // Delete a few Promotions
     * const { count } = await prisma.promotion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromotionDeleteManyArgs>(args?: SelectSubset<T, PromotionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promotions
     * const promotion = await prisma.promotion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromotionUpdateManyArgs>(args: SelectSubset<T, PromotionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions and returns the data updated in the database.
     * @param {PromotionUpdateManyAndReturnArgs} args - Arguments to update many Promotions.
     * @example
     * // Update many Promotions
     * const promotion = await prisma.promotion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Promotions and only return the `id`
     * const promotionWithIdOnly = await prisma.promotion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PromotionUpdateManyAndReturnArgs>(args: SelectSubset<T, PromotionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Promotion.
     * @param {PromotionUpsertArgs} args - Arguments to update or create a Promotion.
     * @example
     * // Update or create a Promotion
     * const promotion = await prisma.promotion.upsert({
     *   create: {
     *     // ... data to create a Promotion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promotion we want to update
     *   }
     * })
     */
    upsert<T extends PromotionUpsertArgs>(args: SelectSubset<T, PromotionUpsertArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCountArgs} args - Arguments to filter Promotions to count.
     * @example
     * // Count the number of Promotions
     * const count = await prisma.promotion.count({
     *   where: {
     *     // ... the filter for the Promotions we want to count
     *   }
     * })
    **/
    count<T extends PromotionCountArgs>(
      args?: Subset<T, PromotionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionAggregateArgs>(args: Subset<T, PromotionAggregateArgs>): Prisma.PrismaPromise<GetPromotionAggregateType<T>>

    /**
     * Group by Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromotionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromotionGroupByArgs['orderBy'] }
        : { orderBy?: PromotionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromotionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Promotion model
   */
  readonly fields: PromotionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Promotion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromotionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referentiels<T extends Promotion$referentielsArgs<ExtArgs> = {}>(args?: Subset<T, Promotion$referentielsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Promotion model
   */
  interface PromotionFieldRefs {
    readonly id: FieldRef<"Promotion", 'Int'>
    readonly date_debut: FieldRef<"Promotion", 'DateTime'>
    readonly duree: FieldRef<"Promotion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Promotion findUnique
   */
  export type PromotionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion findUniqueOrThrow
   */
  export type PromotionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion findFirst
   */
  export type PromotionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promotions.
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * Promotion findFirstOrThrow
   */
  export type PromotionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promotions.
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * Promotion findMany
   */
  export type PromotionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Promotions.
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * Promotion create
   */
  export type PromotionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * The data needed to create a Promotion.
     */
    data: XOR<PromotionCreateInput, PromotionUncheckedCreateInput>
  }

  /**
   * Promotion createMany
   */
  export type PromotionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Promotions.
     */
    data: PromotionCreateManyInput | PromotionCreateManyInput[]
  }

  /**
   * Promotion createManyAndReturn
   */
  export type PromotionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * The data used to create many Promotions.
     */
    data: PromotionCreateManyInput | PromotionCreateManyInput[]
  }

  /**
   * Promotion update
   */
  export type PromotionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * The data needed to update a Promotion.
     */
    data: XOR<PromotionUpdateInput, PromotionUncheckedUpdateInput>
    /**
     * Choose, which Promotion to update.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion updateMany
   */
  export type PromotionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Promotions.
     */
    data: XOR<PromotionUpdateManyMutationInput, PromotionUncheckedUpdateManyInput>
    /**
     * Filter which Promotions to update
     */
    where?: PromotionWhereInput
    /**
     * Limit how many Promotions to update.
     */
    limit?: number
  }

  /**
   * Promotion updateManyAndReturn
   */
  export type PromotionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * The data used to update Promotions.
     */
    data: XOR<PromotionUpdateManyMutationInput, PromotionUncheckedUpdateManyInput>
    /**
     * Filter which Promotions to update
     */
    where?: PromotionWhereInput
    /**
     * Limit how many Promotions to update.
     */
    limit?: number
  }

  /**
   * Promotion upsert
   */
  export type PromotionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * The filter to search for the Promotion to update in case it exists.
     */
    where: PromotionWhereUniqueInput
    /**
     * In case the Promotion found by the `where` argument doesn't exist, create a new Promotion with this data.
     */
    create: XOR<PromotionCreateInput, PromotionUncheckedCreateInput>
    /**
     * In case the Promotion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromotionUpdateInput, PromotionUncheckedUpdateInput>
  }

  /**
   * Promotion delete
   */
  export type PromotionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter which Promotion to delete.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion deleteMany
   */
  export type PromotionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promotions to delete
     */
    where?: PromotionWhereInput
    /**
     * Limit how many Promotions to delete.
     */
    limit?: number
  }

  /**
   * Promotion.referentiels
   */
  export type Promotion$referentielsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    where?: ReferentielWhereInput
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    cursor?: ReferentielWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Promotion without action
   */
  export type PromotionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
  }


  /**
   * Model Referentiel
   */

  export type AggregateReferentiel = {
    _count: ReferentielCountAggregateOutputType | null
    _avg: ReferentielAvgAggregateOutputType | null
    _sum: ReferentielSumAggregateOutputType | null
    _min: ReferentielMinAggregateOutputType | null
    _max: ReferentielMaxAggregateOutputType | null
  }

  export type ReferentielAvgAggregateOutputType = {
    id: number | null
    promotionId: number | null
  }

  export type ReferentielSumAggregateOutputType = {
    id: number | null
    promotionId: number | null
  }

  export type ReferentielMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
    promotionId: number | null
  }

  export type ReferentielMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
    promotionId: number | null
  }

  export type ReferentielCountAggregateOutputType = {
    id: number
    libelle: number
    description: number
    promotionId: number
    _all: number
  }


  export type ReferentielAvgAggregateInputType = {
    id?: true
    promotionId?: true
  }

  export type ReferentielSumAggregateInputType = {
    id?: true
    promotionId?: true
  }

  export type ReferentielMinAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    promotionId?: true
  }

  export type ReferentielMaxAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    promotionId?: true
  }

  export type ReferentielCountAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    promotionId?: true
    _all?: true
  }

  export type ReferentielAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referentiel to aggregate.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referentiels
    **/
    _count?: true | ReferentielCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferentielAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferentielSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferentielMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferentielMaxAggregateInputType
  }

  export type GetReferentielAggregateType<T extends ReferentielAggregateArgs> = {
        [P in keyof T & keyof AggregateReferentiel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferentiel[P]>
      : GetScalarType<T[P], AggregateReferentiel[P]>
  }




  export type ReferentielGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferentielWhereInput
    orderBy?: ReferentielOrderByWithAggregationInput | ReferentielOrderByWithAggregationInput[]
    by: ReferentielScalarFieldEnum[] | ReferentielScalarFieldEnum
    having?: ReferentielScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferentielCountAggregateInputType | true
    _avg?: ReferentielAvgAggregateInputType
    _sum?: ReferentielSumAggregateInputType
    _min?: ReferentielMinAggregateInputType
    _max?: ReferentielMaxAggregateInputType
  }

  export type ReferentielGroupByOutputType = {
    id: number
    libelle: string
    description: string | null
    promotionId: number
    _count: ReferentielCountAggregateOutputType | null
    _avg: ReferentielAvgAggregateOutputType | null
    _sum: ReferentielSumAggregateOutputType | null
    _min: ReferentielMinAggregateOutputType | null
    _max: ReferentielMaxAggregateOutputType | null
  }

  type GetReferentielGroupByPayload<T extends ReferentielGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferentielGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferentielGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferentielGroupByOutputType[P]>
            : GetScalarType<T[P], ReferentielGroupByOutputType[P]>
        }
      >
    >


  export type ReferentielSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    promotionId?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    profilsSortie?: boolean | Referentiel$profilsSortieArgs<ExtArgs>
    _count?: boolean | ReferentielCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referentiel"]>

  export type ReferentielSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    promotionId?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referentiel"]>

  export type ReferentielSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    promotionId?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referentiel"]>

  export type ReferentielSelectScalar = {
    id?: boolean
    libelle?: boolean
    description?: boolean
    promotionId?: boolean
  }

  export type ReferentielOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "libelle" | "description" | "promotionId", ExtArgs["result"]["referentiel"]>
  export type ReferentielInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    profilsSortie?: boolean | Referentiel$profilsSortieArgs<ExtArgs>
    _count?: boolean | ReferentielCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReferentielIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
  }
  export type ReferentielIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
  }

  export type $ReferentielPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referentiel"
    objects: {
      promotion: Prisma.$PromotionPayload<ExtArgs>
      profilsSortie: Prisma.$ProfilSortiePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      description: string | null
      promotionId: number
    }, ExtArgs["result"]["referentiel"]>
    composites: {}
  }

  type ReferentielGetPayload<S extends boolean | null | undefined | ReferentielDefaultArgs> = $Result.GetResult<Prisma.$ReferentielPayload, S>

  type ReferentielCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferentielFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferentielCountAggregateInputType | true
    }

  export interface ReferentielDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referentiel'], meta: { name: 'Referentiel' } }
    /**
     * Find zero or one Referentiel that matches the filter.
     * @param {ReferentielFindUniqueArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferentielFindUniqueArgs>(args: SelectSubset<T, ReferentielFindUniqueArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Referentiel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferentielFindUniqueOrThrowArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferentielFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferentielFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referentiel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielFindFirstArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferentielFindFirstArgs>(args?: SelectSubset<T, ReferentielFindFirstArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referentiel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielFindFirstOrThrowArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferentielFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferentielFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Referentiels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referentiels
     * const referentiels = await prisma.referentiel.findMany()
     * 
     * // Get first 10 Referentiels
     * const referentiels = await prisma.referentiel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referentielWithIdOnly = await prisma.referentiel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferentielFindManyArgs>(args?: SelectSubset<T, ReferentielFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Referentiel.
     * @param {ReferentielCreateArgs} args - Arguments to create a Referentiel.
     * @example
     * // Create one Referentiel
     * const Referentiel = await prisma.referentiel.create({
     *   data: {
     *     // ... data to create a Referentiel
     *   }
     * })
     * 
     */
    create<T extends ReferentielCreateArgs>(args: SelectSubset<T, ReferentielCreateArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Referentiels.
     * @param {ReferentielCreateManyArgs} args - Arguments to create many Referentiels.
     * @example
     * // Create many Referentiels
     * const referentiel = await prisma.referentiel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferentielCreateManyArgs>(args?: SelectSubset<T, ReferentielCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Referentiels and returns the data saved in the database.
     * @param {ReferentielCreateManyAndReturnArgs} args - Arguments to create many Referentiels.
     * @example
     * // Create many Referentiels
     * const referentiel = await prisma.referentiel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Referentiels and only return the `id`
     * const referentielWithIdOnly = await prisma.referentiel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferentielCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferentielCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Referentiel.
     * @param {ReferentielDeleteArgs} args - Arguments to delete one Referentiel.
     * @example
     * // Delete one Referentiel
     * const Referentiel = await prisma.referentiel.delete({
     *   where: {
     *     // ... filter to delete one Referentiel
     *   }
     * })
     * 
     */
    delete<T extends ReferentielDeleteArgs>(args: SelectSubset<T, ReferentielDeleteArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Referentiel.
     * @param {ReferentielUpdateArgs} args - Arguments to update one Referentiel.
     * @example
     * // Update one Referentiel
     * const referentiel = await prisma.referentiel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferentielUpdateArgs>(args: SelectSubset<T, ReferentielUpdateArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Referentiels.
     * @param {ReferentielDeleteManyArgs} args - Arguments to filter Referentiels to delete.
     * @example
     * // Delete a few Referentiels
     * const { count } = await prisma.referentiel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferentielDeleteManyArgs>(args?: SelectSubset<T, ReferentielDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referentiels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referentiels
     * const referentiel = await prisma.referentiel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferentielUpdateManyArgs>(args: SelectSubset<T, ReferentielUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referentiels and returns the data updated in the database.
     * @param {ReferentielUpdateManyAndReturnArgs} args - Arguments to update many Referentiels.
     * @example
     * // Update many Referentiels
     * const referentiel = await prisma.referentiel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Referentiels and only return the `id`
     * const referentielWithIdOnly = await prisma.referentiel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferentielUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferentielUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Referentiel.
     * @param {ReferentielUpsertArgs} args - Arguments to update or create a Referentiel.
     * @example
     * // Update or create a Referentiel
     * const referentiel = await prisma.referentiel.upsert({
     *   create: {
     *     // ... data to create a Referentiel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referentiel we want to update
     *   }
     * })
     */
    upsert<T extends ReferentielUpsertArgs>(args: SelectSubset<T, ReferentielUpsertArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Referentiels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCountArgs} args - Arguments to filter Referentiels to count.
     * @example
     * // Count the number of Referentiels
     * const count = await prisma.referentiel.count({
     *   where: {
     *     // ... the filter for the Referentiels we want to count
     *   }
     * })
    **/
    count<T extends ReferentielCountArgs>(
      args?: Subset<T, ReferentielCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferentielCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referentiel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferentielAggregateArgs>(args: Subset<T, ReferentielAggregateArgs>): Prisma.PrismaPromise<GetReferentielAggregateType<T>>

    /**
     * Group by Referentiel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferentielGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferentielGroupByArgs['orderBy'] }
        : { orderBy?: ReferentielGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferentielGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferentielGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referentiel model
   */
  readonly fields: ReferentielFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referentiel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferentielClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    promotion<T extends PromotionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromotionDefaultArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profilsSortie<T extends Referentiel$profilsSortieArgs<ExtArgs> = {}>(args?: Subset<T, Referentiel$profilsSortieArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referentiel model
   */
  interface ReferentielFieldRefs {
    readonly id: FieldRef<"Referentiel", 'Int'>
    readonly libelle: FieldRef<"Referentiel", 'String'>
    readonly description: FieldRef<"Referentiel", 'String'>
    readonly promotionId: FieldRef<"Referentiel", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Referentiel findUnique
   */
  export type ReferentielFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel findUniqueOrThrow
   */
  export type ReferentielFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel findFirst
   */
  export type ReferentielFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referentiels.
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referentiels.
     */
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Referentiel findFirstOrThrow
   */
  export type ReferentielFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referentiels.
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referentiels.
     */
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Referentiel findMany
   */
  export type ReferentielFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiels to fetch.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referentiels.
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Referentiel create
   */
  export type ReferentielCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * The data needed to create a Referentiel.
     */
    data: XOR<ReferentielCreateInput, ReferentielUncheckedCreateInput>
  }

  /**
   * Referentiel createMany
   */
  export type ReferentielCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referentiels.
     */
    data: ReferentielCreateManyInput | ReferentielCreateManyInput[]
  }

  /**
   * Referentiel createManyAndReturn
   */
  export type ReferentielCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * The data used to create many Referentiels.
     */
    data: ReferentielCreateManyInput | ReferentielCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referentiel update
   */
  export type ReferentielUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * The data needed to update a Referentiel.
     */
    data: XOR<ReferentielUpdateInput, ReferentielUncheckedUpdateInput>
    /**
     * Choose, which Referentiel to update.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel updateMany
   */
  export type ReferentielUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referentiels.
     */
    data: XOR<ReferentielUpdateManyMutationInput, ReferentielUncheckedUpdateManyInput>
    /**
     * Filter which Referentiels to update
     */
    where?: ReferentielWhereInput
    /**
     * Limit how many Referentiels to update.
     */
    limit?: number
  }

  /**
   * Referentiel updateManyAndReturn
   */
  export type ReferentielUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * The data used to update Referentiels.
     */
    data: XOR<ReferentielUpdateManyMutationInput, ReferentielUncheckedUpdateManyInput>
    /**
     * Filter which Referentiels to update
     */
    where?: ReferentielWhereInput
    /**
     * Limit how many Referentiels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referentiel upsert
   */
  export type ReferentielUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * The filter to search for the Referentiel to update in case it exists.
     */
    where: ReferentielWhereUniqueInput
    /**
     * In case the Referentiel found by the `where` argument doesn't exist, create a new Referentiel with this data.
     */
    create: XOR<ReferentielCreateInput, ReferentielUncheckedCreateInput>
    /**
     * In case the Referentiel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferentielUpdateInput, ReferentielUncheckedUpdateInput>
  }

  /**
   * Referentiel delete
   */
  export type ReferentielDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter which Referentiel to delete.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel deleteMany
   */
  export type ReferentielDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referentiels to delete
     */
    where?: ReferentielWhereInput
    /**
     * Limit how many Referentiels to delete.
     */
    limit?: number
  }

  /**
   * Referentiel.profilsSortie
   */
  export type Referentiel$profilsSortieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    where?: ProfilSortieWhereInput
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    cursor?: ProfilSortieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * Referentiel without action
   */
  export type ReferentielDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
  }


  /**
   * Model ProfilSortie
   */

  export type AggregateProfilSortie = {
    _count: ProfilSortieCountAggregateOutputType | null
    _avg: ProfilSortieAvgAggregateOutputType | null
    _sum: ProfilSortieSumAggregateOutputType | null
    _min: ProfilSortieMinAggregateOutputType | null
    _max: ProfilSortieMaxAggregateOutputType | null
  }

  export type ProfilSortieAvgAggregateOutputType = {
    id: number | null
    referentielId: number | null
  }

  export type ProfilSortieSumAggregateOutputType = {
    id: number | null
    referentielId: number | null
  }

  export type ProfilSortieMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
    referentielId: number | null
  }

  export type ProfilSortieMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
    referentielId: number | null
  }

  export type ProfilSortieCountAggregateOutputType = {
    id: number
    libelle: number
    description: number
    referentielId: number
    _all: number
  }


  export type ProfilSortieAvgAggregateInputType = {
    id?: true
    referentielId?: true
  }

  export type ProfilSortieSumAggregateInputType = {
    id?: true
    referentielId?: true
  }

  export type ProfilSortieMinAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    referentielId?: true
  }

  export type ProfilSortieMaxAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    referentielId?: true
  }

  export type ProfilSortieCountAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    referentielId?: true
    _all?: true
  }

  export type ProfilSortieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilSortie to aggregate.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilSorties
    **/
    _count?: true | ProfilSortieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilSortieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilSortieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilSortieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilSortieMaxAggregateInputType
  }

  export type GetProfilSortieAggregateType<T extends ProfilSortieAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilSortie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilSortie[P]>
      : GetScalarType<T[P], AggregateProfilSortie[P]>
  }




  export type ProfilSortieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilSortieWhereInput
    orderBy?: ProfilSortieOrderByWithAggregationInput | ProfilSortieOrderByWithAggregationInput[]
    by: ProfilSortieScalarFieldEnum[] | ProfilSortieScalarFieldEnum
    having?: ProfilSortieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilSortieCountAggregateInputType | true
    _avg?: ProfilSortieAvgAggregateInputType
    _sum?: ProfilSortieSumAggregateInputType
    _min?: ProfilSortieMinAggregateInputType
    _max?: ProfilSortieMaxAggregateInputType
  }

  export type ProfilSortieGroupByOutputType = {
    id: number
    libelle: string
    description: string | null
    referentielId: number
    _count: ProfilSortieCountAggregateOutputType | null
    _avg: ProfilSortieAvgAggregateOutputType | null
    _sum: ProfilSortieSumAggregateOutputType | null
    _min: ProfilSortieMinAggregateOutputType | null
    _max: ProfilSortieMaxAggregateOutputType | null
  }

  type GetProfilSortieGroupByPayload<T extends ProfilSortieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilSortieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilSortieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilSortieGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilSortieGroupByOutputType[P]>
        }
      >
    >


  export type ProfilSortieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    referentielId?: boolean
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilSortie"]>

  export type ProfilSortieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    referentielId?: boolean
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilSortie"]>

  export type ProfilSortieSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    referentielId?: boolean
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilSortie"]>

  export type ProfilSortieSelectScalar = {
    id?: boolean
    libelle?: boolean
    description?: boolean
    referentielId?: boolean
  }

  export type ProfilSortieOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "libelle" | "description" | "referentielId", ExtArgs["result"]["profilSortie"]>
  export type ProfilSortieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
  }
  export type ProfilSortieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
  }
  export type ProfilSortieIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
  }

  export type $ProfilSortiePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilSortie"
    objects: {
      referentiel: Prisma.$ReferentielPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      description: string | null
      referentielId: number
    }, ExtArgs["result"]["profilSortie"]>
    composites: {}
  }

  type ProfilSortieGetPayload<S extends boolean | null | undefined | ProfilSortieDefaultArgs> = $Result.GetResult<Prisma.$ProfilSortiePayload, S>

  type ProfilSortieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilSortieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilSortieCountAggregateInputType | true
    }

  export interface ProfilSortieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilSortie'], meta: { name: 'ProfilSortie' } }
    /**
     * Find zero or one ProfilSortie that matches the filter.
     * @param {ProfilSortieFindUniqueArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilSortieFindUniqueArgs>(args: SelectSubset<T, ProfilSortieFindUniqueArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfilSortie that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilSortieFindUniqueOrThrowArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilSortieFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilSortieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilSortie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieFindFirstArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilSortieFindFirstArgs>(args?: SelectSubset<T, ProfilSortieFindFirstArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilSortie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieFindFirstOrThrowArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilSortieFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilSortieFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfilSorties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilSorties
     * const profilSorties = await prisma.profilSortie.findMany()
     * 
     * // Get first 10 ProfilSorties
     * const profilSorties = await prisma.profilSortie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilSortieWithIdOnly = await prisma.profilSortie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilSortieFindManyArgs>(args?: SelectSubset<T, ProfilSortieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfilSortie.
     * @param {ProfilSortieCreateArgs} args - Arguments to create a ProfilSortie.
     * @example
     * // Create one ProfilSortie
     * const ProfilSortie = await prisma.profilSortie.create({
     *   data: {
     *     // ... data to create a ProfilSortie
     *   }
     * })
     * 
     */
    create<T extends ProfilSortieCreateArgs>(args: SelectSubset<T, ProfilSortieCreateArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfilSorties.
     * @param {ProfilSortieCreateManyArgs} args - Arguments to create many ProfilSorties.
     * @example
     * // Create many ProfilSorties
     * const profilSortie = await prisma.profilSortie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilSortieCreateManyArgs>(args?: SelectSubset<T, ProfilSortieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfilSorties and returns the data saved in the database.
     * @param {ProfilSortieCreateManyAndReturnArgs} args - Arguments to create many ProfilSorties.
     * @example
     * // Create many ProfilSorties
     * const profilSortie = await prisma.profilSortie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfilSorties and only return the `id`
     * const profilSortieWithIdOnly = await prisma.profilSortie.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfilSortieCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfilSortieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfilSortie.
     * @param {ProfilSortieDeleteArgs} args - Arguments to delete one ProfilSortie.
     * @example
     * // Delete one ProfilSortie
     * const ProfilSortie = await prisma.profilSortie.delete({
     *   where: {
     *     // ... filter to delete one ProfilSortie
     *   }
     * })
     * 
     */
    delete<T extends ProfilSortieDeleteArgs>(args: SelectSubset<T, ProfilSortieDeleteArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfilSortie.
     * @param {ProfilSortieUpdateArgs} args - Arguments to update one ProfilSortie.
     * @example
     * // Update one ProfilSortie
     * const profilSortie = await prisma.profilSortie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilSortieUpdateArgs>(args: SelectSubset<T, ProfilSortieUpdateArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfilSorties.
     * @param {ProfilSortieDeleteManyArgs} args - Arguments to filter ProfilSorties to delete.
     * @example
     * // Delete a few ProfilSorties
     * const { count } = await prisma.profilSortie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilSortieDeleteManyArgs>(args?: SelectSubset<T, ProfilSortieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilSorties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilSorties
     * const profilSortie = await prisma.profilSortie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilSortieUpdateManyArgs>(args: SelectSubset<T, ProfilSortieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilSorties and returns the data updated in the database.
     * @param {ProfilSortieUpdateManyAndReturnArgs} args - Arguments to update many ProfilSorties.
     * @example
     * // Update many ProfilSorties
     * const profilSortie = await prisma.profilSortie.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfilSorties and only return the `id`
     * const profilSortieWithIdOnly = await prisma.profilSortie.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfilSortieUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfilSortieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfilSortie.
     * @param {ProfilSortieUpsertArgs} args - Arguments to update or create a ProfilSortie.
     * @example
     * // Update or create a ProfilSortie
     * const profilSortie = await prisma.profilSortie.upsert({
     *   create: {
     *     // ... data to create a ProfilSortie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilSortie we want to update
     *   }
     * })
     */
    upsert<T extends ProfilSortieUpsertArgs>(args: SelectSubset<T, ProfilSortieUpsertArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfilSorties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieCountArgs} args - Arguments to filter ProfilSorties to count.
     * @example
     * // Count the number of ProfilSorties
     * const count = await prisma.profilSortie.count({
     *   where: {
     *     // ... the filter for the ProfilSorties we want to count
     *   }
     * })
    **/
    count<T extends ProfilSortieCountArgs>(
      args?: Subset<T, ProfilSortieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilSortieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilSortie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilSortieAggregateArgs>(args: Subset<T, ProfilSortieAggregateArgs>): Prisma.PrismaPromise<GetProfilSortieAggregateType<T>>

    /**
     * Group by ProfilSortie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilSortieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilSortieGroupByArgs['orderBy'] }
        : { orderBy?: ProfilSortieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilSortieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilSortieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilSortie model
   */
  readonly fields: ProfilSortieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilSortie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilSortieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referentiel<T extends ReferentielDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReferentielDefaultArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfilSortie model
   */
  interface ProfilSortieFieldRefs {
    readonly id: FieldRef<"ProfilSortie", 'Int'>
    readonly libelle: FieldRef<"ProfilSortie", 'String'>
    readonly description: FieldRef<"ProfilSortie", 'String'>
    readonly referentielId: FieldRef<"ProfilSortie", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProfilSortie findUnique
   */
  export type ProfilSortieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie findUniqueOrThrow
   */
  export type ProfilSortieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie findFirst
   */
  export type ProfilSortieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilSorties.
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilSorties.
     */
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * ProfilSortie findFirstOrThrow
   */
  export type ProfilSortieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilSorties.
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilSorties.
     */
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * ProfilSortie findMany
   */
  export type ProfilSortieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSorties to fetch.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilSorties.
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * ProfilSortie create
   */
  export type ProfilSortieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilSortie.
     */
    data: XOR<ProfilSortieCreateInput, ProfilSortieUncheckedCreateInput>
  }

  /**
   * ProfilSortie createMany
   */
  export type ProfilSortieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilSorties.
     */
    data: ProfilSortieCreateManyInput | ProfilSortieCreateManyInput[]
  }

  /**
   * ProfilSortie createManyAndReturn
   */
  export type ProfilSortieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * The data used to create many ProfilSorties.
     */
    data: ProfilSortieCreateManyInput | ProfilSortieCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfilSortie update
   */
  export type ProfilSortieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilSortie.
     */
    data: XOR<ProfilSortieUpdateInput, ProfilSortieUncheckedUpdateInput>
    /**
     * Choose, which ProfilSortie to update.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie updateMany
   */
  export type ProfilSortieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilSorties.
     */
    data: XOR<ProfilSortieUpdateManyMutationInput, ProfilSortieUncheckedUpdateManyInput>
    /**
     * Filter which ProfilSorties to update
     */
    where?: ProfilSortieWhereInput
    /**
     * Limit how many ProfilSorties to update.
     */
    limit?: number
  }

  /**
   * ProfilSortie updateManyAndReturn
   */
  export type ProfilSortieUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * The data used to update ProfilSorties.
     */
    data: XOR<ProfilSortieUpdateManyMutationInput, ProfilSortieUncheckedUpdateManyInput>
    /**
     * Filter which ProfilSorties to update
     */
    where?: ProfilSortieWhereInput
    /**
     * Limit how many ProfilSorties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfilSortie upsert
   */
  export type ProfilSortieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilSortie to update in case it exists.
     */
    where: ProfilSortieWhereUniqueInput
    /**
     * In case the ProfilSortie found by the `where` argument doesn't exist, create a new ProfilSortie with this data.
     */
    create: XOR<ProfilSortieCreateInput, ProfilSortieUncheckedCreateInput>
    /**
     * In case the ProfilSortie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilSortieUpdateInput, ProfilSortieUncheckedUpdateInput>
  }

  /**
   * ProfilSortie delete
   */
  export type ProfilSortieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter which ProfilSortie to delete.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie deleteMany
   */
  export type ProfilSortieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilSorties to delete
     */
    where?: ProfilSortieWhereInput
    /**
     * Limit how many ProfilSorties to delete.
     */
    limit?: number
  }

  /**
   * ProfilSortie without action
   */
  export type ProfilSortieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
  }


  /**
   * Model Competence
   */

  export type AggregateCompetence = {
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  export type CompetenceAvgAggregateOutputType = {
    id: number | null
  }

  export type CompetenceSumAggregateOutputType = {
    id: number | null
  }

  export type CompetenceMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
  }

  export type CompetenceMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
  }

  export type CompetenceCountAggregateOutputType = {
    id: number
    libelle: number
    description: number
    _all: number
  }


  export type CompetenceAvgAggregateInputType = {
    id?: true
  }

  export type CompetenceSumAggregateInputType = {
    id?: true
  }

  export type CompetenceMinAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
  }

  export type CompetenceMaxAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
  }

  export type CompetenceCountAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    _all?: true
  }

  export type CompetenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competence to aggregate.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competences
    **/
    _count?: true | CompetenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenceMaxAggregateInputType
  }

  export type GetCompetenceAggregateType<T extends CompetenceAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetence[P]>
      : GetScalarType<T[P], AggregateCompetence[P]>
  }




  export type CompetenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceWhereInput
    orderBy?: CompetenceOrderByWithAggregationInput | CompetenceOrderByWithAggregationInput[]
    by: CompetenceScalarFieldEnum[] | CompetenceScalarFieldEnum
    having?: CompetenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenceCountAggregateInputType | true
    _avg?: CompetenceAvgAggregateInputType
    _sum?: CompetenceSumAggregateInputType
    _min?: CompetenceMinAggregateInputType
    _max?: CompetenceMaxAggregateInputType
  }

  export type CompetenceGroupByOutputType = {
    id: number
    libelle: string
    description: string | null
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  type GetCompetenceGroupByPayload<T extends CompetenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
        }
      >
    >


  export type CompetenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    niveaux?: boolean | Competence$niveauxArgs<ExtArgs>
    tags?: boolean | Competence$tagsArgs<ExtArgs>
    _count?: boolean | CompetenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competence"]>

  export type CompetenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
  }, ExtArgs["result"]["competence"]>

  export type CompetenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
  }, ExtArgs["result"]["competence"]>

  export type CompetenceSelectScalar = {
    id?: boolean
    libelle?: boolean
    description?: boolean
  }

  export type CompetenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "libelle" | "description", ExtArgs["result"]["competence"]>
  export type CompetenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    niveaux?: boolean | Competence$niveauxArgs<ExtArgs>
    tags?: boolean | Competence$tagsArgs<ExtArgs>
    _count?: boolean | CompetenceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompetenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompetenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompetencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competence"
    objects: {
      niveaux: Prisma.$NiveauPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      description: string | null
    }, ExtArgs["result"]["competence"]>
    composites: {}
  }

  type CompetenceGetPayload<S extends boolean | null | undefined | CompetenceDefaultArgs> = $Result.GetResult<Prisma.$CompetencePayload, S>

  type CompetenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompetenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompetenceCountAggregateInputType | true
    }

  export interface CompetenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competence'], meta: { name: 'Competence' } }
    /**
     * Find zero or one Competence that matches the filter.
     * @param {CompetenceFindUniqueArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetenceFindUniqueArgs>(args: SelectSubset<T, CompetenceFindUniqueArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Competence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompetenceFindUniqueOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetenceFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Competence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetenceFindFirstArgs>(args?: SelectSubset<T, CompetenceFindFirstArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Competence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetenceFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Competences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competences
     * const competences = await prisma.competence.findMany()
     * 
     * // Get first 10 Competences
     * const competences = await prisma.competence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competenceWithIdOnly = await prisma.competence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetenceFindManyArgs>(args?: SelectSubset<T, CompetenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Competence.
     * @param {CompetenceCreateArgs} args - Arguments to create a Competence.
     * @example
     * // Create one Competence
     * const Competence = await prisma.competence.create({
     *   data: {
     *     // ... data to create a Competence
     *   }
     * })
     * 
     */
    create<T extends CompetenceCreateArgs>(args: SelectSubset<T, CompetenceCreateArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Competences.
     * @param {CompetenceCreateManyArgs} args - Arguments to create many Competences.
     * @example
     * // Create many Competences
     * const competence = await prisma.competence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetenceCreateManyArgs>(args?: SelectSubset<T, CompetenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Competences and returns the data saved in the database.
     * @param {CompetenceCreateManyAndReturnArgs} args - Arguments to create many Competences.
     * @example
     * // Create many Competences
     * const competence = await prisma.competence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Competences and only return the `id`
     * const competenceWithIdOnly = await prisma.competence.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetenceCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Competence.
     * @param {CompetenceDeleteArgs} args - Arguments to delete one Competence.
     * @example
     * // Delete one Competence
     * const Competence = await prisma.competence.delete({
     *   where: {
     *     // ... filter to delete one Competence
     *   }
     * })
     * 
     */
    delete<T extends CompetenceDeleteArgs>(args: SelectSubset<T, CompetenceDeleteArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Competence.
     * @param {CompetenceUpdateArgs} args - Arguments to update one Competence.
     * @example
     * // Update one Competence
     * const competence = await prisma.competence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetenceUpdateArgs>(args: SelectSubset<T, CompetenceUpdateArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Competences.
     * @param {CompetenceDeleteManyArgs} args - Arguments to filter Competences to delete.
     * @example
     * // Delete a few Competences
     * const { count } = await prisma.competence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetenceDeleteManyArgs>(args?: SelectSubset<T, CompetenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competences
     * const competence = await prisma.competence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetenceUpdateManyArgs>(args: SelectSubset<T, CompetenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competences and returns the data updated in the database.
     * @param {CompetenceUpdateManyAndReturnArgs} args - Arguments to update many Competences.
     * @example
     * // Update many Competences
     * const competence = await prisma.competence.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Competences and only return the `id`
     * const competenceWithIdOnly = await prisma.competence.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompetenceUpdateManyAndReturnArgs>(args: SelectSubset<T, CompetenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Competence.
     * @param {CompetenceUpsertArgs} args - Arguments to update or create a Competence.
     * @example
     * // Update or create a Competence
     * const competence = await prisma.competence.upsert({
     *   create: {
     *     // ... data to create a Competence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competence we want to update
     *   }
     * })
     */
    upsert<T extends CompetenceUpsertArgs>(args: SelectSubset<T, CompetenceUpsertArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceCountArgs} args - Arguments to filter Competences to count.
     * @example
     * // Count the number of Competences
     * const count = await prisma.competence.count({
     *   where: {
     *     // ... the filter for the Competences we want to count
     *   }
     * })
    **/
    count<T extends CompetenceCountArgs>(
      args?: Subset<T, CompetenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenceAggregateArgs>(args: Subset<T, CompetenceAggregateArgs>): Prisma.PrismaPromise<GetCompetenceAggregateType<T>>

    /**
     * Group by Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenceGroupByArgs['orderBy'] }
        : { orderBy?: CompetenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competence model
   */
  readonly fields: CompetenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    niveaux<T extends Competence$niveauxArgs<ExtArgs> = {}>(args?: Subset<T, Competence$niveauxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tags<T extends Competence$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Competence$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Competence model
   */
  interface CompetenceFieldRefs {
    readonly id: FieldRef<"Competence", 'Int'>
    readonly libelle: FieldRef<"Competence", 'String'>
    readonly description: FieldRef<"Competence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Competence findUnique
   */
  export type CompetenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findUniqueOrThrow
   */
  export type CompetenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findFirst
   */
  export type CompetenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence findFirstOrThrow
   */
  export type CompetenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence findMany
   */
  export type CompetenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competences to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence create
   */
  export type CompetenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Competence.
     */
    data: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
  }

  /**
   * Competence createMany
   */
  export type CompetenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competences.
     */
    data: CompetenceCreateManyInput | CompetenceCreateManyInput[]
  }

  /**
   * Competence createManyAndReturn
   */
  export type CompetenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * The data used to create many Competences.
     */
    data: CompetenceCreateManyInput | CompetenceCreateManyInput[]
  }

  /**
   * Competence update
   */
  export type CompetenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Competence.
     */
    data: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
    /**
     * Choose, which Competence to update.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence updateMany
   */
  export type CompetenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competences.
     */
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyInput>
    /**
     * Filter which Competences to update
     */
    where?: CompetenceWhereInput
    /**
     * Limit how many Competences to update.
     */
    limit?: number
  }

  /**
   * Competence updateManyAndReturn
   */
  export type CompetenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * The data used to update Competences.
     */
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyInput>
    /**
     * Filter which Competences to update
     */
    where?: CompetenceWhereInput
    /**
     * Limit how many Competences to update.
     */
    limit?: number
  }

  /**
   * Competence upsert
   */
  export type CompetenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Competence to update in case it exists.
     */
    where: CompetenceWhereUniqueInput
    /**
     * In case the Competence found by the `where` argument doesn't exist, create a new Competence with this data.
     */
    create: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
    /**
     * In case the Competence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
  }

  /**
   * Competence delete
   */
  export type CompetenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter which Competence to delete.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence deleteMany
   */
  export type CompetenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competences to delete
     */
    where?: CompetenceWhereInput
    /**
     * Limit how many Competences to delete.
     */
    limit?: number
  }

  /**
   * Competence.niveaux
   */
  export type Competence$niveauxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    where?: NiveauWhereInput
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    cursor?: NiveauWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Competence.tags
   */
  export type Competence$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Competence without action
   */
  export type CompetenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
  }


  /**
   * Model Niveau
   */

  export type AggregateNiveau = {
    _count: NiveauCountAggregateOutputType | null
    _avg: NiveauAvgAggregateOutputType | null
    _sum: NiveauSumAggregateOutputType | null
    _min: NiveauMinAggregateOutputType | null
    _max: NiveauMaxAggregateOutputType | null
  }

  export type NiveauAvgAggregateOutputType = {
    id: number | null
    competenceId: number | null
  }

  export type NiveauSumAggregateOutputType = {
    id: number | null
    competenceId: number | null
  }

  export type NiveauMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    competenceId: number | null
  }

  export type NiveauMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    competenceId: number | null
  }

  export type NiveauCountAggregateOutputType = {
    id: number
    libelle: number
    competenceId: number
    _all: number
  }


  export type NiveauAvgAggregateInputType = {
    id?: true
    competenceId?: true
  }

  export type NiveauSumAggregateInputType = {
    id?: true
    competenceId?: true
  }

  export type NiveauMinAggregateInputType = {
    id?: true
    libelle?: true
    competenceId?: true
  }

  export type NiveauMaxAggregateInputType = {
    id?: true
    libelle?: true
    competenceId?: true
  }

  export type NiveauCountAggregateInputType = {
    id?: true
    libelle?: true
    competenceId?: true
    _all?: true
  }

  export type NiveauAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Niveau to aggregate.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Niveaus
    **/
    _count?: true | NiveauCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NiveauAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NiveauSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NiveauMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NiveauMaxAggregateInputType
  }

  export type GetNiveauAggregateType<T extends NiveauAggregateArgs> = {
        [P in keyof T & keyof AggregateNiveau]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNiveau[P]>
      : GetScalarType<T[P], AggregateNiveau[P]>
  }




  export type NiveauGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NiveauWhereInput
    orderBy?: NiveauOrderByWithAggregationInput | NiveauOrderByWithAggregationInput[]
    by: NiveauScalarFieldEnum[] | NiveauScalarFieldEnum
    having?: NiveauScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NiveauCountAggregateInputType | true
    _avg?: NiveauAvgAggregateInputType
    _sum?: NiveauSumAggregateInputType
    _min?: NiveauMinAggregateInputType
    _max?: NiveauMaxAggregateInputType
  }

  export type NiveauGroupByOutputType = {
    id: number
    libelle: string
    competenceId: number
    _count: NiveauCountAggregateOutputType | null
    _avg: NiveauAvgAggregateOutputType | null
    _sum: NiveauSumAggregateOutputType | null
    _min: NiveauMinAggregateOutputType | null
    _max: NiveauMaxAggregateOutputType | null
  }

  type GetNiveauGroupByPayload<T extends NiveauGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NiveauGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NiveauGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NiveauGroupByOutputType[P]>
            : GetScalarType<T[P], NiveauGroupByOutputType[P]>
        }
      >
    >


  export type NiveauSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    competenceId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["niveau"]>

  export type NiveauSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    competenceId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["niveau"]>

  export type NiveauSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    competenceId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["niveau"]>

  export type NiveauSelectScalar = {
    id?: boolean
    libelle?: boolean
    competenceId?: boolean
  }

  export type NiveauOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "libelle" | "competenceId", ExtArgs["result"]["niveau"]>
  export type NiveauInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }
  export type NiveauIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }
  export type NiveauIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }

  export type $NiveauPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Niveau"
    objects: {
      competence: Prisma.$CompetencePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      competenceId: number
    }, ExtArgs["result"]["niveau"]>
    composites: {}
  }

  type NiveauGetPayload<S extends boolean | null | undefined | NiveauDefaultArgs> = $Result.GetResult<Prisma.$NiveauPayload, S>

  type NiveauCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NiveauFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NiveauCountAggregateInputType | true
    }

  export interface NiveauDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Niveau'], meta: { name: 'Niveau' } }
    /**
     * Find zero or one Niveau that matches the filter.
     * @param {NiveauFindUniqueArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NiveauFindUniqueArgs>(args: SelectSubset<T, NiveauFindUniqueArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Niveau that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NiveauFindUniqueOrThrowArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NiveauFindUniqueOrThrowArgs>(args: SelectSubset<T, NiveauFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Niveau that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauFindFirstArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NiveauFindFirstArgs>(args?: SelectSubset<T, NiveauFindFirstArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Niveau that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauFindFirstOrThrowArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NiveauFindFirstOrThrowArgs>(args?: SelectSubset<T, NiveauFindFirstOrThrowArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Niveaus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Niveaus
     * const niveaus = await prisma.niveau.findMany()
     * 
     * // Get first 10 Niveaus
     * const niveaus = await prisma.niveau.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const niveauWithIdOnly = await prisma.niveau.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NiveauFindManyArgs>(args?: SelectSubset<T, NiveauFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Niveau.
     * @param {NiveauCreateArgs} args - Arguments to create a Niveau.
     * @example
     * // Create one Niveau
     * const Niveau = await prisma.niveau.create({
     *   data: {
     *     // ... data to create a Niveau
     *   }
     * })
     * 
     */
    create<T extends NiveauCreateArgs>(args: SelectSubset<T, NiveauCreateArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Niveaus.
     * @param {NiveauCreateManyArgs} args - Arguments to create many Niveaus.
     * @example
     * // Create many Niveaus
     * const niveau = await prisma.niveau.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NiveauCreateManyArgs>(args?: SelectSubset<T, NiveauCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Niveaus and returns the data saved in the database.
     * @param {NiveauCreateManyAndReturnArgs} args - Arguments to create many Niveaus.
     * @example
     * // Create many Niveaus
     * const niveau = await prisma.niveau.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Niveaus and only return the `id`
     * const niveauWithIdOnly = await prisma.niveau.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NiveauCreateManyAndReturnArgs>(args?: SelectSubset<T, NiveauCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Niveau.
     * @param {NiveauDeleteArgs} args - Arguments to delete one Niveau.
     * @example
     * // Delete one Niveau
     * const Niveau = await prisma.niveau.delete({
     *   where: {
     *     // ... filter to delete one Niveau
     *   }
     * })
     * 
     */
    delete<T extends NiveauDeleteArgs>(args: SelectSubset<T, NiveauDeleteArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Niveau.
     * @param {NiveauUpdateArgs} args - Arguments to update one Niveau.
     * @example
     * // Update one Niveau
     * const niveau = await prisma.niveau.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NiveauUpdateArgs>(args: SelectSubset<T, NiveauUpdateArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Niveaus.
     * @param {NiveauDeleteManyArgs} args - Arguments to filter Niveaus to delete.
     * @example
     * // Delete a few Niveaus
     * const { count } = await prisma.niveau.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NiveauDeleteManyArgs>(args?: SelectSubset<T, NiveauDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Niveaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Niveaus
     * const niveau = await prisma.niveau.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NiveauUpdateManyArgs>(args: SelectSubset<T, NiveauUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Niveaus and returns the data updated in the database.
     * @param {NiveauUpdateManyAndReturnArgs} args - Arguments to update many Niveaus.
     * @example
     * // Update many Niveaus
     * const niveau = await prisma.niveau.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Niveaus and only return the `id`
     * const niveauWithIdOnly = await prisma.niveau.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NiveauUpdateManyAndReturnArgs>(args: SelectSubset<T, NiveauUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Niveau.
     * @param {NiveauUpsertArgs} args - Arguments to update or create a Niveau.
     * @example
     * // Update or create a Niveau
     * const niveau = await prisma.niveau.upsert({
     *   create: {
     *     // ... data to create a Niveau
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Niveau we want to update
     *   }
     * })
     */
    upsert<T extends NiveauUpsertArgs>(args: SelectSubset<T, NiveauUpsertArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Niveaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauCountArgs} args - Arguments to filter Niveaus to count.
     * @example
     * // Count the number of Niveaus
     * const count = await prisma.niveau.count({
     *   where: {
     *     // ... the filter for the Niveaus we want to count
     *   }
     * })
    **/
    count<T extends NiveauCountArgs>(
      args?: Subset<T, NiveauCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NiveauCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Niveau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NiveauAggregateArgs>(args: Subset<T, NiveauAggregateArgs>): Prisma.PrismaPromise<GetNiveauAggregateType<T>>

    /**
     * Group by Niveau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NiveauGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NiveauGroupByArgs['orderBy'] }
        : { orderBy?: NiveauGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NiveauGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNiveauGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Niveau model
   */
  readonly fields: NiveauFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Niveau.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NiveauClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competence<T extends CompetenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetenceDefaultArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Niveau model
   */
  interface NiveauFieldRefs {
    readonly id: FieldRef<"Niveau", 'Int'>
    readonly libelle: FieldRef<"Niveau", 'String'>
    readonly competenceId: FieldRef<"Niveau", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Niveau findUnique
   */
  export type NiveauFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau findUniqueOrThrow
   */
  export type NiveauFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau findFirst
   */
  export type NiveauFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Niveaus.
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Niveaus.
     */
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Niveau findFirstOrThrow
   */
  export type NiveauFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Niveaus.
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Niveaus.
     */
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Niveau findMany
   */
  export type NiveauFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveaus to fetch.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Niveaus.
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Niveau create
   */
  export type NiveauCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * The data needed to create a Niveau.
     */
    data: XOR<NiveauCreateInput, NiveauUncheckedCreateInput>
  }

  /**
   * Niveau createMany
   */
  export type NiveauCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Niveaus.
     */
    data: NiveauCreateManyInput | NiveauCreateManyInput[]
  }

  /**
   * Niveau createManyAndReturn
   */
  export type NiveauCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * The data used to create many Niveaus.
     */
    data: NiveauCreateManyInput | NiveauCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Niveau update
   */
  export type NiveauUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * The data needed to update a Niveau.
     */
    data: XOR<NiveauUpdateInput, NiveauUncheckedUpdateInput>
    /**
     * Choose, which Niveau to update.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau updateMany
   */
  export type NiveauUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Niveaus.
     */
    data: XOR<NiveauUpdateManyMutationInput, NiveauUncheckedUpdateManyInput>
    /**
     * Filter which Niveaus to update
     */
    where?: NiveauWhereInput
    /**
     * Limit how many Niveaus to update.
     */
    limit?: number
  }

  /**
   * Niveau updateManyAndReturn
   */
  export type NiveauUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * The data used to update Niveaus.
     */
    data: XOR<NiveauUpdateManyMutationInput, NiveauUncheckedUpdateManyInput>
    /**
     * Filter which Niveaus to update
     */
    where?: NiveauWhereInput
    /**
     * Limit how many Niveaus to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Niveau upsert
   */
  export type NiveauUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * The filter to search for the Niveau to update in case it exists.
     */
    where: NiveauWhereUniqueInput
    /**
     * In case the Niveau found by the `where` argument doesn't exist, create a new Niveau with this data.
     */
    create: XOR<NiveauCreateInput, NiveauUncheckedCreateInput>
    /**
     * In case the Niveau was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NiveauUpdateInput, NiveauUncheckedUpdateInput>
  }

  /**
   * Niveau delete
   */
  export type NiveauDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter which Niveau to delete.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau deleteMany
   */
  export type NiveauDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Niveaus to delete
     */
    where?: NiveauWhereInput
    /**
     * Limit how many Niveaus to delete.
     */
    limit?: number
  }

  /**
   * Niveau without action
   */
  export type NiveauDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
    competenceId: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
    competenceId: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
    competenceId: number | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    description: string | null
    competenceId: number | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    libelle: number
    description: number
    competenceId: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
    competenceId?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
    competenceId?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    competenceId?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    competenceId?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    libelle?: true
    description?: true
    competenceId?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: number
    libelle: string
    description: string | null
    competenceId: number
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    competenceId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    competenceId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    description?: boolean
    competenceId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    libelle?: boolean
    description?: boolean
    competenceId?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "libelle" | "description" | "competenceId", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      competence: Prisma.$CompetencePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      description: string | null
      competenceId: number
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competence<T extends CompetenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetenceDefaultArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'Int'>
    readonly libelle: FieldRef<"Tag", 'String'>
    readonly description: FieldRef<"Tag", 'String'>
    readonly competenceId: FieldRef<"Tag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilisateurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    password: 'password',
    login: 'login',
    statut: 'statut',
    profileId: 'profileId'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const PromotionScalarFieldEnum: {
    id: 'id',
    date_debut: 'date_debut',
    duree: 'duree'
  };

  export type PromotionScalarFieldEnum = (typeof PromotionScalarFieldEnum)[keyof typeof PromotionScalarFieldEnum]


  export const ReferentielScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    description: 'description',
    promotionId: 'promotionId'
  };

  export type ReferentielScalarFieldEnum = (typeof ReferentielScalarFieldEnum)[keyof typeof ReferentielScalarFieldEnum]


  export const ProfilSortieScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    description: 'description',
    referentielId: 'referentielId'
  };

  export type ProfilSortieScalarFieldEnum = (typeof ProfilSortieScalarFieldEnum)[keyof typeof ProfilSortieScalarFieldEnum]


  export const CompetenceScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    description: 'description'
  };

  export type CompetenceScalarFieldEnum = (typeof CompetenceScalarFieldEnum)[keyof typeof CompetenceScalarFieldEnum]


  export const NiveauScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    competenceId: 'competenceId'
  };

  export type NiveauScalarFieldEnum = (typeof NiveauScalarFieldEnum)[keyof typeof NiveauScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    description: 'description',
    competenceId: 'competenceId'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'StatutUtilisateur'
   */
  export type EnumStatutUtilisateurFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutUtilisateur'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    id?: IntFilter<"Utilisateur"> | number
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    email?: StringFilter<"Utilisateur"> | string
    password?: StringFilter<"Utilisateur"> | string
    login?: StringFilter<"Utilisateur"> | string
    statut?: EnumStatutUtilisateurFilter<"Utilisateur"> | $Enums.StatutUtilisateur
    profileId?: IntFilter<"Utilisateur"> | number
    profile?: XOR<ProfilesScalarRelationFilter, ProfilesWhereInput>
  }

  export type UtilisateurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login?: SortOrder
    statut?: SortOrder
    profileId?: SortOrder
    profile?: ProfilesOrderByWithRelationInput
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    login?: string
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    password?: StringFilter<"Utilisateur"> | string
    statut?: EnumStatutUtilisateurFilter<"Utilisateur"> | $Enums.StatutUtilisateur
    profileId?: IntFilter<"Utilisateur"> | number
    profile?: XOR<ProfilesScalarRelationFilter, ProfilesWhereInput>
  }, "id" | "email" | "login">

  export type UtilisateurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login?: SortOrder
    statut?: SortOrder
    profileId?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Utilisateur"> | number
    nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    prenom?: StringWithAggregatesFilter<"Utilisateur"> | string
    email?: StringWithAggregatesFilter<"Utilisateur"> | string
    password?: StringWithAggregatesFilter<"Utilisateur"> | string
    login?: StringWithAggregatesFilter<"Utilisateur"> | string
    statut?: EnumStatutUtilisateurWithAggregatesFilter<"Utilisateur"> | $Enums.StatutUtilisateur
    profileId?: IntWithAggregatesFilter<"Utilisateur"> | number
  }

  export type ProfilesWhereInput = {
    AND?: ProfilesWhereInput | ProfilesWhereInput[]
    OR?: ProfilesWhereInput[]
    NOT?: ProfilesWhereInput | ProfilesWhereInput[]
    id?: IntFilter<"Profiles"> | number
    libelle?: StringFilter<"Profiles"> | string
    utilisateurs?: UtilisateurListRelationFilter
  }

  export type ProfilesOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    utilisateurs?: UtilisateurOrderByRelationAggregateInput
  }

  export type ProfilesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfilesWhereInput | ProfilesWhereInput[]
    OR?: ProfilesWhereInput[]
    NOT?: ProfilesWhereInput | ProfilesWhereInput[]
    libelle?: StringFilter<"Profiles"> | string
    utilisateurs?: UtilisateurListRelationFilter
  }, "id">

  export type ProfilesOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    _count?: ProfilesCountOrderByAggregateInput
    _avg?: ProfilesAvgOrderByAggregateInput
    _max?: ProfilesMaxOrderByAggregateInput
    _min?: ProfilesMinOrderByAggregateInput
    _sum?: ProfilesSumOrderByAggregateInput
  }

  export type ProfilesScalarWhereWithAggregatesInput = {
    AND?: ProfilesScalarWhereWithAggregatesInput | ProfilesScalarWhereWithAggregatesInput[]
    OR?: ProfilesScalarWhereWithAggregatesInput[]
    NOT?: ProfilesScalarWhereWithAggregatesInput | ProfilesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profiles"> | number
    libelle?: StringWithAggregatesFilter<"Profiles"> | string
  }

  export type PromotionWhereInput = {
    AND?: PromotionWhereInput | PromotionWhereInput[]
    OR?: PromotionWhereInput[]
    NOT?: PromotionWhereInput | PromotionWhereInput[]
    id?: IntFilter<"Promotion"> | number
    date_debut?: DateTimeFilter<"Promotion"> | Date | string
    duree?: StringFilter<"Promotion"> | string
    referentiels?: ReferentielListRelationFilter
  }

  export type PromotionOrderByWithRelationInput = {
    id?: SortOrder
    date_debut?: SortOrder
    duree?: SortOrder
    referentiels?: ReferentielOrderByRelationAggregateInput
  }

  export type PromotionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PromotionWhereInput | PromotionWhereInput[]
    OR?: PromotionWhereInput[]
    NOT?: PromotionWhereInput | PromotionWhereInput[]
    date_debut?: DateTimeFilter<"Promotion"> | Date | string
    duree?: StringFilter<"Promotion"> | string
    referentiels?: ReferentielListRelationFilter
  }, "id">

  export type PromotionOrderByWithAggregationInput = {
    id?: SortOrder
    date_debut?: SortOrder
    duree?: SortOrder
    _count?: PromotionCountOrderByAggregateInput
    _avg?: PromotionAvgOrderByAggregateInput
    _max?: PromotionMaxOrderByAggregateInput
    _min?: PromotionMinOrderByAggregateInput
    _sum?: PromotionSumOrderByAggregateInput
  }

  export type PromotionScalarWhereWithAggregatesInput = {
    AND?: PromotionScalarWhereWithAggregatesInput | PromotionScalarWhereWithAggregatesInput[]
    OR?: PromotionScalarWhereWithAggregatesInput[]
    NOT?: PromotionScalarWhereWithAggregatesInput | PromotionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Promotion"> | number
    date_debut?: DateTimeWithAggregatesFilter<"Promotion"> | Date | string
    duree?: StringWithAggregatesFilter<"Promotion"> | string
  }

  export type ReferentielWhereInput = {
    AND?: ReferentielWhereInput | ReferentielWhereInput[]
    OR?: ReferentielWhereInput[]
    NOT?: ReferentielWhereInput | ReferentielWhereInput[]
    id?: IntFilter<"Referentiel"> | number
    libelle?: StringFilter<"Referentiel"> | string
    description?: StringNullableFilter<"Referentiel"> | string | null
    promotionId?: IntFilter<"Referentiel"> | number
    promotion?: XOR<PromotionScalarRelationFilter, PromotionWhereInput>
    profilsSortie?: ProfilSortieListRelationFilter
  }

  export type ReferentielOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    promotionId?: SortOrder
    promotion?: PromotionOrderByWithRelationInput
    profilsSortie?: ProfilSortieOrderByRelationAggregateInput
  }

  export type ReferentielWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReferentielWhereInput | ReferentielWhereInput[]
    OR?: ReferentielWhereInput[]
    NOT?: ReferentielWhereInput | ReferentielWhereInput[]
    libelle?: StringFilter<"Referentiel"> | string
    description?: StringNullableFilter<"Referentiel"> | string | null
    promotionId?: IntFilter<"Referentiel"> | number
    promotion?: XOR<PromotionScalarRelationFilter, PromotionWhereInput>
    profilsSortie?: ProfilSortieListRelationFilter
  }, "id">

  export type ReferentielOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    promotionId?: SortOrder
    _count?: ReferentielCountOrderByAggregateInput
    _avg?: ReferentielAvgOrderByAggregateInput
    _max?: ReferentielMaxOrderByAggregateInput
    _min?: ReferentielMinOrderByAggregateInput
    _sum?: ReferentielSumOrderByAggregateInput
  }

  export type ReferentielScalarWhereWithAggregatesInput = {
    AND?: ReferentielScalarWhereWithAggregatesInput | ReferentielScalarWhereWithAggregatesInput[]
    OR?: ReferentielScalarWhereWithAggregatesInput[]
    NOT?: ReferentielScalarWhereWithAggregatesInput | ReferentielScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Referentiel"> | number
    libelle?: StringWithAggregatesFilter<"Referentiel"> | string
    description?: StringNullableWithAggregatesFilter<"Referentiel"> | string | null
    promotionId?: IntWithAggregatesFilter<"Referentiel"> | number
  }

  export type ProfilSortieWhereInput = {
    AND?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    OR?: ProfilSortieWhereInput[]
    NOT?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    id?: IntFilter<"ProfilSortie"> | number
    libelle?: StringFilter<"ProfilSortie"> | string
    description?: StringNullableFilter<"ProfilSortie"> | string | null
    referentielId?: IntFilter<"ProfilSortie"> | number
    referentiel?: XOR<ReferentielScalarRelationFilter, ReferentielWhereInput>
  }

  export type ProfilSortieOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    referentielId?: SortOrder
    referentiel?: ReferentielOrderByWithRelationInput
  }

  export type ProfilSortieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    OR?: ProfilSortieWhereInput[]
    NOT?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    libelle?: StringFilter<"ProfilSortie"> | string
    description?: StringNullableFilter<"ProfilSortie"> | string | null
    referentielId?: IntFilter<"ProfilSortie"> | number
    referentiel?: XOR<ReferentielScalarRelationFilter, ReferentielWhereInput>
  }, "id">

  export type ProfilSortieOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    referentielId?: SortOrder
    _count?: ProfilSortieCountOrderByAggregateInput
    _avg?: ProfilSortieAvgOrderByAggregateInput
    _max?: ProfilSortieMaxOrderByAggregateInput
    _min?: ProfilSortieMinOrderByAggregateInput
    _sum?: ProfilSortieSumOrderByAggregateInput
  }

  export type ProfilSortieScalarWhereWithAggregatesInput = {
    AND?: ProfilSortieScalarWhereWithAggregatesInput | ProfilSortieScalarWhereWithAggregatesInput[]
    OR?: ProfilSortieScalarWhereWithAggregatesInput[]
    NOT?: ProfilSortieScalarWhereWithAggregatesInput | ProfilSortieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfilSortie"> | number
    libelle?: StringWithAggregatesFilter<"ProfilSortie"> | string
    description?: StringNullableWithAggregatesFilter<"ProfilSortie"> | string | null
    referentielId?: IntWithAggregatesFilter<"ProfilSortie"> | number
  }

  export type CompetenceWhereInput = {
    AND?: CompetenceWhereInput | CompetenceWhereInput[]
    OR?: CompetenceWhereInput[]
    NOT?: CompetenceWhereInput | CompetenceWhereInput[]
    id?: IntFilter<"Competence"> | number
    libelle?: StringFilter<"Competence"> | string
    description?: StringNullableFilter<"Competence"> | string | null
    niveaux?: NiveauListRelationFilter
    tags?: TagListRelationFilter
  }

  export type CompetenceOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    niveaux?: NiveauOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type CompetenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompetenceWhereInput | CompetenceWhereInput[]
    OR?: CompetenceWhereInput[]
    NOT?: CompetenceWhereInput | CompetenceWhereInput[]
    libelle?: StringFilter<"Competence"> | string
    description?: StringNullableFilter<"Competence"> | string | null
    niveaux?: NiveauListRelationFilter
    tags?: TagListRelationFilter
  }, "id">

  export type CompetenceOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CompetenceCountOrderByAggregateInput
    _avg?: CompetenceAvgOrderByAggregateInput
    _max?: CompetenceMaxOrderByAggregateInput
    _min?: CompetenceMinOrderByAggregateInput
    _sum?: CompetenceSumOrderByAggregateInput
  }

  export type CompetenceScalarWhereWithAggregatesInput = {
    AND?: CompetenceScalarWhereWithAggregatesInput | CompetenceScalarWhereWithAggregatesInput[]
    OR?: CompetenceScalarWhereWithAggregatesInput[]
    NOT?: CompetenceScalarWhereWithAggregatesInput | CompetenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Competence"> | number
    libelle?: StringWithAggregatesFilter<"Competence"> | string
    description?: StringNullableWithAggregatesFilter<"Competence"> | string | null
  }

  export type NiveauWhereInput = {
    AND?: NiveauWhereInput | NiveauWhereInput[]
    OR?: NiveauWhereInput[]
    NOT?: NiveauWhereInput | NiveauWhereInput[]
    id?: IntFilter<"Niveau"> | number
    libelle?: StringFilter<"Niveau"> | string
    competenceId?: IntFilter<"Niveau"> | number
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
  }

  export type NiveauOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    competenceId?: SortOrder
    competence?: CompetenceOrderByWithRelationInput
  }

  export type NiveauWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NiveauWhereInput | NiveauWhereInput[]
    OR?: NiveauWhereInput[]
    NOT?: NiveauWhereInput | NiveauWhereInput[]
    libelle?: StringFilter<"Niveau"> | string
    competenceId?: IntFilter<"Niveau"> | number
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
  }, "id">

  export type NiveauOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    competenceId?: SortOrder
    _count?: NiveauCountOrderByAggregateInput
    _avg?: NiveauAvgOrderByAggregateInput
    _max?: NiveauMaxOrderByAggregateInput
    _min?: NiveauMinOrderByAggregateInput
    _sum?: NiveauSumOrderByAggregateInput
  }

  export type NiveauScalarWhereWithAggregatesInput = {
    AND?: NiveauScalarWhereWithAggregatesInput | NiveauScalarWhereWithAggregatesInput[]
    OR?: NiveauScalarWhereWithAggregatesInput[]
    NOT?: NiveauScalarWhereWithAggregatesInput | NiveauScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Niveau"> | number
    libelle?: StringWithAggregatesFilter<"Niveau"> | string
    competenceId?: IntWithAggregatesFilter<"Niveau"> | number
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: IntFilter<"Tag"> | number
    libelle?: StringFilter<"Tag"> | string
    description?: StringNullableFilter<"Tag"> | string | null
    competenceId?: IntFilter<"Tag"> | number
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    competenceId?: SortOrder
    competence?: CompetenceOrderByWithRelationInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    libelle?: StringFilter<"Tag"> | string
    description?: StringNullableFilter<"Tag"> | string | null
    competenceId?: IntFilter<"Tag"> | number
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
  }, "id">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrderInput | SortOrder
    competenceId?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tag"> | number
    libelle?: StringWithAggregatesFilter<"Tag"> | string
    description?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    competenceId?: IntWithAggregatesFilter<"Tag"> | number
  }

  export type UtilisateurCreateInput = {
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
    profile: ProfilesCreateNestedOneWithoutUtilisateursInput
  }

  export type UtilisateurUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
    profileId: number
  }

  export type UtilisateurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
    profile?: ProfilesUpdateOneRequiredWithoutUtilisateursNestedInput
  }

  export type UtilisateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type UtilisateurCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
    profileId: number
  }

  export type UtilisateurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfilesCreateInput = {
    libelle: string
    utilisateurs?: UtilisateurCreateNestedManyWithoutProfileInput
  }

  export type ProfilesUncheckedCreateInput = {
    id?: number
    libelle: string
    utilisateurs?: UtilisateurUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfilesUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    utilisateurs?: UtilisateurUpdateManyWithoutProfileNestedInput
  }

  export type ProfilesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    utilisateurs?: UtilisateurUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfilesCreateManyInput = {
    id?: number
    libelle: string
  }

  export type ProfilesUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionCreateInput = {
    date_debut: Date | string
    duree: string
    referentiels?: ReferentielCreateNestedManyWithoutPromotionInput
  }

  export type PromotionUncheckedCreateInput = {
    id?: number
    date_debut: Date | string
    duree: string
    referentiels?: ReferentielUncheckedCreateNestedManyWithoutPromotionInput
  }

  export type PromotionUpdateInput = {
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    referentiels?: ReferentielUpdateManyWithoutPromotionNestedInput
  }

  export type PromotionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
    referentiels?: ReferentielUncheckedUpdateManyWithoutPromotionNestedInput
  }

  export type PromotionCreateManyInput = {
    id?: number
    date_debut: Date | string
    duree: string
  }

  export type PromotionUpdateManyMutationInput = {
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
  }

  export type ReferentielCreateInput = {
    libelle: string
    description?: string | null
    promotion: PromotionCreateNestedOneWithoutReferentielsInput
    profilsSortie?: ProfilSortieCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUncheckedCreateInput = {
    id?: number
    libelle: string
    description?: string | null
    promotionId: number
    profilsSortie?: ProfilSortieUncheckedCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    promotion?: PromotionUpdateOneRequiredWithoutReferentielsNestedInput
    profilsSortie?: ProfilSortieUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    promotionId?: IntFieldUpdateOperationsInput | number
    profilsSortie?: ProfilSortieUncheckedUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielCreateManyInput = {
    id?: number
    libelle: string
    description?: string | null
    promotionId: number
  }

  export type ReferentielUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferentielUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    promotionId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfilSortieCreateInput = {
    libelle: string
    description?: string | null
    referentiel: ReferentielCreateNestedOneWithoutProfilsSortieInput
  }

  export type ProfilSortieUncheckedCreateInput = {
    id?: number
    libelle: string
    description?: string | null
    referentielId: number
  }

  export type ProfilSortieUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referentiel?: ReferentielUpdateOneRequiredWithoutProfilsSortieNestedInput
  }

  export type ProfilSortieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referentielId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfilSortieCreateManyInput = {
    id?: number
    libelle: string
    description?: string | null
    referentielId: number
  }

  export type ProfilSortieUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilSortieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referentielId?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceCreateInput = {
    libelle: string
    description?: string | null
    niveaux?: NiveauCreateNestedManyWithoutCompetenceInput
    tags?: TagCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateInput = {
    id?: number
    libelle: string
    description?: string | null
    niveaux?: NiveauUncheckedCreateNestedManyWithoutCompetenceInput
    tags?: TagUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: NiveauUpdateManyWithoutCompetenceNestedInput
    tags?: TagUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: NiveauUncheckedUpdateManyWithoutCompetenceNestedInput
    tags?: TagUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceCreateManyInput = {
    id?: number
    libelle: string
    description?: string | null
  }

  export type CompetenceUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NiveauCreateInput = {
    libelle: string
    competence: CompetenceCreateNestedOneWithoutNiveauxInput
  }

  export type NiveauUncheckedCreateInput = {
    id?: number
    libelle: string
    competenceId: number
  }

  export type NiveauUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    competence?: CompetenceUpdateOneRequiredWithoutNiveauxNestedInput
  }

  export type NiveauUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type NiveauCreateManyInput = {
    id?: number
    libelle: string
    competenceId: number
  }

  export type NiveauUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type NiveauUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateInput = {
    libelle: string
    description?: string | null
    competence: CompetenceCreateNestedOneWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    libelle: string
    description?: string | null
    competenceId: number
  }

  export type TagUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competence?: CompetenceUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateManyInput = {
    id?: number
    libelle: string
    description?: string | null
    competenceId: number
  }

  export type TagUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumStatutUtilisateurFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutUtilisateur | EnumStatutUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.StatutUtilisateur[]
    notIn?: $Enums.StatutUtilisateur[]
    not?: NestedEnumStatutUtilisateurFilter<$PrismaModel> | $Enums.StatutUtilisateur
  }

  export type ProfilesScalarRelationFilter = {
    is?: ProfilesWhereInput
    isNot?: ProfilesWhereInput
  }

  export type UtilisateurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login?: SortOrder
    statut?: SortOrder
    profileId?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login?: SortOrder
    statut?: SortOrder
    profileId?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login?: SortOrder
    statut?: SortOrder
    profileId?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumStatutUtilisateurWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutUtilisateur | EnumStatutUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.StatutUtilisateur[]
    notIn?: $Enums.StatutUtilisateur[]
    not?: NestedEnumStatutUtilisateurWithAggregatesFilter<$PrismaModel> | $Enums.StatutUtilisateur
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutUtilisateurFilter<$PrismaModel>
    _max?: NestedEnumStatutUtilisateurFilter<$PrismaModel>
  }

  export type UtilisateurListRelationFilter = {
    every?: UtilisateurWhereInput
    some?: UtilisateurWhereInput
    none?: UtilisateurWhereInput
  }

  export type UtilisateurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfilesCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
  }

  export type ProfilesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfilesMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
  }

  export type ProfilesMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
  }

  export type ProfilesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ReferentielListRelationFilter = {
    every?: ReferentielWhereInput
    some?: ReferentielWhereInput
    none?: ReferentielWhereInput
  }

  export type ReferentielOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromotionCountOrderByAggregateInput = {
    id?: SortOrder
    date_debut?: SortOrder
    duree?: SortOrder
  }

  export type PromotionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PromotionMaxOrderByAggregateInput = {
    id?: SortOrder
    date_debut?: SortOrder
    duree?: SortOrder
  }

  export type PromotionMinOrderByAggregateInput = {
    id?: SortOrder
    date_debut?: SortOrder
    duree?: SortOrder
  }

  export type PromotionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PromotionScalarRelationFilter = {
    is?: PromotionWhereInput
    isNot?: PromotionWhereInput
  }

  export type ProfilSortieListRelationFilter = {
    every?: ProfilSortieWhereInput
    some?: ProfilSortieWhereInput
    none?: ProfilSortieWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProfilSortieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferentielCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    promotionId?: SortOrder
  }

  export type ReferentielAvgOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
  }

  export type ReferentielMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    promotionId?: SortOrder
  }

  export type ReferentielMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    promotionId?: SortOrder
  }

  export type ReferentielSumOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ReferentielScalarRelationFilter = {
    is?: ReferentielWhereInput
    isNot?: ReferentielWhereInput
  }

  export type ProfilSortieCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    referentielId?: SortOrder
  }

  export type ProfilSortieAvgOrderByAggregateInput = {
    id?: SortOrder
    referentielId?: SortOrder
  }

  export type ProfilSortieMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    referentielId?: SortOrder
  }

  export type ProfilSortieMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    referentielId?: SortOrder
  }

  export type ProfilSortieSumOrderByAggregateInput = {
    id?: SortOrder
    referentielId?: SortOrder
  }

  export type NiveauListRelationFilter = {
    every?: NiveauWhereInput
    some?: NiveauWhereInput
    none?: NiveauWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type NiveauOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetenceCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
  }

  export type CompetenceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompetenceMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
  }

  export type CompetenceMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
  }

  export type CompetenceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompetenceScalarRelationFilter = {
    is?: CompetenceWhereInput
    isNot?: CompetenceWhereInput
  }

  export type NiveauCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    competenceId?: SortOrder
  }

  export type NiveauAvgOrderByAggregateInput = {
    id?: SortOrder
    competenceId?: SortOrder
  }

  export type NiveauMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    competenceId?: SortOrder
  }

  export type NiveauMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    competenceId?: SortOrder
  }

  export type NiveauSumOrderByAggregateInput = {
    id?: SortOrder
    competenceId?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    competenceId?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
    competenceId?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    competenceId?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    description?: SortOrder
    competenceId?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
    competenceId?: SortOrder
  }

  export type ProfilesCreateNestedOneWithoutUtilisateursInput = {
    create?: XOR<ProfilesCreateWithoutUtilisateursInput, ProfilesUncheckedCreateWithoutUtilisateursInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUtilisateursInput
    connect?: ProfilesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumStatutUtilisateurFieldUpdateOperationsInput = {
    set?: $Enums.StatutUtilisateur
  }

  export type ProfilesUpdateOneRequiredWithoutUtilisateursNestedInput = {
    create?: XOR<ProfilesCreateWithoutUtilisateursInput, ProfilesUncheckedCreateWithoutUtilisateursInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUtilisateursInput
    upsert?: ProfilesUpsertWithoutUtilisateursInput
    connect?: ProfilesWhereUniqueInput
    update?: XOR<XOR<ProfilesUpdateToOneWithWhereWithoutUtilisateursInput, ProfilesUpdateWithoutUtilisateursInput>, ProfilesUncheckedUpdateWithoutUtilisateursInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UtilisateurCreateNestedManyWithoutProfileInput = {
    create?: XOR<UtilisateurCreateWithoutProfileInput, UtilisateurUncheckedCreateWithoutProfileInput> | UtilisateurCreateWithoutProfileInput[] | UtilisateurUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutProfileInput | UtilisateurCreateOrConnectWithoutProfileInput[]
    createMany?: UtilisateurCreateManyProfileInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type UtilisateurUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<UtilisateurCreateWithoutProfileInput, UtilisateurUncheckedCreateWithoutProfileInput> | UtilisateurCreateWithoutProfileInput[] | UtilisateurUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutProfileInput | UtilisateurCreateOrConnectWithoutProfileInput[]
    createMany?: UtilisateurCreateManyProfileInputEnvelope
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
  }

  export type UtilisateurUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UtilisateurCreateWithoutProfileInput, UtilisateurUncheckedCreateWithoutProfileInput> | UtilisateurCreateWithoutProfileInput[] | UtilisateurUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutProfileInput | UtilisateurCreateOrConnectWithoutProfileInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutProfileInput | UtilisateurUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UtilisateurCreateManyProfileInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutProfileInput | UtilisateurUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutProfileInput | UtilisateurUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type UtilisateurUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UtilisateurCreateWithoutProfileInput, UtilisateurUncheckedCreateWithoutProfileInput> | UtilisateurCreateWithoutProfileInput[] | UtilisateurUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UtilisateurCreateOrConnectWithoutProfileInput | UtilisateurCreateOrConnectWithoutProfileInput[]
    upsert?: UtilisateurUpsertWithWhereUniqueWithoutProfileInput | UtilisateurUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UtilisateurCreateManyProfileInputEnvelope
    set?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    disconnect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    delete?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    connect?: UtilisateurWhereUniqueInput | UtilisateurWhereUniqueInput[]
    update?: UtilisateurUpdateWithWhereUniqueWithoutProfileInput | UtilisateurUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UtilisateurUpdateManyWithWhereWithoutProfileInput | UtilisateurUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
  }

  export type ReferentielCreateNestedManyWithoutPromotionInput = {
    create?: XOR<ReferentielCreateWithoutPromotionInput, ReferentielUncheckedCreateWithoutPromotionInput> | ReferentielCreateWithoutPromotionInput[] | ReferentielUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: ReferentielCreateOrConnectWithoutPromotionInput | ReferentielCreateOrConnectWithoutPromotionInput[]
    createMany?: ReferentielCreateManyPromotionInputEnvelope
    connect?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
  }

  export type ReferentielUncheckedCreateNestedManyWithoutPromotionInput = {
    create?: XOR<ReferentielCreateWithoutPromotionInput, ReferentielUncheckedCreateWithoutPromotionInput> | ReferentielCreateWithoutPromotionInput[] | ReferentielUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: ReferentielCreateOrConnectWithoutPromotionInput | ReferentielCreateOrConnectWithoutPromotionInput[]
    createMany?: ReferentielCreateManyPromotionInputEnvelope
    connect?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ReferentielUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<ReferentielCreateWithoutPromotionInput, ReferentielUncheckedCreateWithoutPromotionInput> | ReferentielCreateWithoutPromotionInput[] | ReferentielUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: ReferentielCreateOrConnectWithoutPromotionInput | ReferentielCreateOrConnectWithoutPromotionInput[]
    upsert?: ReferentielUpsertWithWhereUniqueWithoutPromotionInput | ReferentielUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: ReferentielCreateManyPromotionInputEnvelope
    set?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    disconnect?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    delete?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    connect?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    update?: ReferentielUpdateWithWhereUniqueWithoutPromotionInput | ReferentielUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: ReferentielUpdateManyWithWhereWithoutPromotionInput | ReferentielUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: ReferentielScalarWhereInput | ReferentielScalarWhereInput[]
  }

  export type ReferentielUncheckedUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<ReferentielCreateWithoutPromotionInput, ReferentielUncheckedCreateWithoutPromotionInput> | ReferentielCreateWithoutPromotionInput[] | ReferentielUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: ReferentielCreateOrConnectWithoutPromotionInput | ReferentielCreateOrConnectWithoutPromotionInput[]
    upsert?: ReferentielUpsertWithWhereUniqueWithoutPromotionInput | ReferentielUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: ReferentielCreateManyPromotionInputEnvelope
    set?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    disconnect?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    delete?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    connect?: ReferentielWhereUniqueInput | ReferentielWhereUniqueInput[]
    update?: ReferentielUpdateWithWhereUniqueWithoutPromotionInput | ReferentielUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: ReferentielUpdateManyWithWhereWithoutPromotionInput | ReferentielUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: ReferentielScalarWhereInput | ReferentielScalarWhereInput[]
  }

  export type PromotionCreateNestedOneWithoutReferentielsInput = {
    create?: XOR<PromotionCreateWithoutReferentielsInput, PromotionUncheckedCreateWithoutReferentielsInput>
    connectOrCreate?: PromotionCreateOrConnectWithoutReferentielsInput
    connect?: PromotionWhereUniqueInput
  }

  export type ProfilSortieCreateNestedManyWithoutReferentielInput = {
    create?: XOR<ProfilSortieCreateWithoutReferentielInput, ProfilSortieUncheckedCreateWithoutReferentielInput> | ProfilSortieCreateWithoutReferentielInput[] | ProfilSortieUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ProfilSortieCreateOrConnectWithoutReferentielInput | ProfilSortieCreateOrConnectWithoutReferentielInput[]
    createMany?: ProfilSortieCreateManyReferentielInputEnvelope
    connect?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
  }

  export type ProfilSortieUncheckedCreateNestedManyWithoutReferentielInput = {
    create?: XOR<ProfilSortieCreateWithoutReferentielInput, ProfilSortieUncheckedCreateWithoutReferentielInput> | ProfilSortieCreateWithoutReferentielInput[] | ProfilSortieUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ProfilSortieCreateOrConnectWithoutReferentielInput | ProfilSortieCreateOrConnectWithoutReferentielInput[]
    createMany?: ProfilSortieCreateManyReferentielInputEnvelope
    connect?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PromotionUpdateOneRequiredWithoutReferentielsNestedInput = {
    create?: XOR<PromotionCreateWithoutReferentielsInput, PromotionUncheckedCreateWithoutReferentielsInput>
    connectOrCreate?: PromotionCreateOrConnectWithoutReferentielsInput
    upsert?: PromotionUpsertWithoutReferentielsInput
    connect?: PromotionWhereUniqueInput
    update?: XOR<XOR<PromotionUpdateToOneWithWhereWithoutReferentielsInput, PromotionUpdateWithoutReferentielsInput>, PromotionUncheckedUpdateWithoutReferentielsInput>
  }

  export type ProfilSortieUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<ProfilSortieCreateWithoutReferentielInput, ProfilSortieUncheckedCreateWithoutReferentielInput> | ProfilSortieCreateWithoutReferentielInput[] | ProfilSortieUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ProfilSortieCreateOrConnectWithoutReferentielInput | ProfilSortieCreateOrConnectWithoutReferentielInput[]
    upsert?: ProfilSortieUpsertWithWhereUniqueWithoutReferentielInput | ProfilSortieUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: ProfilSortieCreateManyReferentielInputEnvelope
    set?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    disconnect?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    delete?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    connect?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    update?: ProfilSortieUpdateWithWhereUniqueWithoutReferentielInput | ProfilSortieUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: ProfilSortieUpdateManyWithWhereWithoutReferentielInput | ProfilSortieUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: ProfilSortieScalarWhereInput | ProfilSortieScalarWhereInput[]
  }

  export type ProfilSortieUncheckedUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<ProfilSortieCreateWithoutReferentielInput, ProfilSortieUncheckedCreateWithoutReferentielInput> | ProfilSortieCreateWithoutReferentielInput[] | ProfilSortieUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ProfilSortieCreateOrConnectWithoutReferentielInput | ProfilSortieCreateOrConnectWithoutReferentielInput[]
    upsert?: ProfilSortieUpsertWithWhereUniqueWithoutReferentielInput | ProfilSortieUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: ProfilSortieCreateManyReferentielInputEnvelope
    set?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    disconnect?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    delete?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    connect?: ProfilSortieWhereUniqueInput | ProfilSortieWhereUniqueInput[]
    update?: ProfilSortieUpdateWithWhereUniqueWithoutReferentielInput | ProfilSortieUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: ProfilSortieUpdateManyWithWhereWithoutReferentielInput | ProfilSortieUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: ProfilSortieScalarWhereInput | ProfilSortieScalarWhereInput[]
  }

  export type ReferentielCreateNestedOneWithoutProfilsSortieInput = {
    create?: XOR<ReferentielCreateWithoutProfilsSortieInput, ReferentielUncheckedCreateWithoutProfilsSortieInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutProfilsSortieInput
    connect?: ReferentielWhereUniqueInput
  }

  export type ReferentielUpdateOneRequiredWithoutProfilsSortieNestedInput = {
    create?: XOR<ReferentielCreateWithoutProfilsSortieInput, ReferentielUncheckedCreateWithoutProfilsSortieInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutProfilsSortieInput
    upsert?: ReferentielUpsertWithoutProfilsSortieInput
    connect?: ReferentielWhereUniqueInput
    update?: XOR<XOR<ReferentielUpdateToOneWithWhereWithoutProfilsSortieInput, ReferentielUpdateWithoutProfilsSortieInput>, ReferentielUncheckedUpdateWithoutProfilsSortieInput>
  }

  export type NiveauCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<NiveauCreateWithoutCompetenceInput, NiveauUncheckedCreateWithoutCompetenceInput> | NiveauCreateWithoutCompetenceInput[] | NiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: NiveauCreateOrConnectWithoutCompetenceInput | NiveauCreateOrConnectWithoutCompetenceInput[]
    createMany?: NiveauCreateManyCompetenceInputEnvelope
    connect?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<TagCreateWithoutCompetenceInput, TagUncheckedCreateWithoutCompetenceInput> | TagCreateWithoutCompetenceInput[] | TagUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompetenceInput | TagCreateOrConnectWithoutCompetenceInput[]
    createMany?: TagCreateManyCompetenceInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type NiveauUncheckedCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<NiveauCreateWithoutCompetenceInput, NiveauUncheckedCreateWithoutCompetenceInput> | NiveauCreateWithoutCompetenceInput[] | NiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: NiveauCreateOrConnectWithoutCompetenceInput | NiveauCreateOrConnectWithoutCompetenceInput[]
    createMany?: NiveauCreateManyCompetenceInputEnvelope
    connect?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<TagCreateWithoutCompetenceInput, TagUncheckedCreateWithoutCompetenceInput> | TagCreateWithoutCompetenceInput[] | TagUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompetenceInput | TagCreateOrConnectWithoutCompetenceInput[]
    createMany?: TagCreateManyCompetenceInputEnvelope
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type NiveauUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<NiveauCreateWithoutCompetenceInput, NiveauUncheckedCreateWithoutCompetenceInput> | NiveauCreateWithoutCompetenceInput[] | NiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: NiveauCreateOrConnectWithoutCompetenceInput | NiveauCreateOrConnectWithoutCompetenceInput[]
    upsert?: NiveauUpsertWithWhereUniqueWithoutCompetenceInput | NiveauUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: NiveauCreateManyCompetenceInputEnvelope
    set?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    disconnect?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    delete?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    connect?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    update?: NiveauUpdateWithWhereUniqueWithoutCompetenceInput | NiveauUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: NiveauUpdateManyWithWhereWithoutCompetenceInput | NiveauUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: NiveauScalarWhereInput | NiveauScalarWhereInput[]
  }

  export type TagUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<TagCreateWithoutCompetenceInput, TagUncheckedCreateWithoutCompetenceInput> | TagCreateWithoutCompetenceInput[] | TagUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompetenceInput | TagCreateOrConnectWithoutCompetenceInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCompetenceInput | TagUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: TagCreateManyCompetenceInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCompetenceInput | TagUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCompetenceInput | TagUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type NiveauUncheckedUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<NiveauCreateWithoutCompetenceInput, NiveauUncheckedCreateWithoutCompetenceInput> | NiveauCreateWithoutCompetenceInput[] | NiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: NiveauCreateOrConnectWithoutCompetenceInput | NiveauCreateOrConnectWithoutCompetenceInput[]
    upsert?: NiveauUpsertWithWhereUniqueWithoutCompetenceInput | NiveauUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: NiveauCreateManyCompetenceInputEnvelope
    set?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    disconnect?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    delete?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    connect?: NiveauWhereUniqueInput | NiveauWhereUniqueInput[]
    update?: NiveauUpdateWithWhereUniqueWithoutCompetenceInput | NiveauUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: NiveauUpdateManyWithWhereWithoutCompetenceInput | NiveauUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: NiveauScalarWhereInput | NiveauScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<TagCreateWithoutCompetenceInput, TagUncheckedCreateWithoutCompetenceInput> | TagCreateWithoutCompetenceInput[] | TagUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: TagCreateOrConnectWithoutCompetenceInput | TagCreateOrConnectWithoutCompetenceInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutCompetenceInput | TagUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: TagCreateManyCompetenceInputEnvelope
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutCompetenceInput | TagUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: TagUpdateManyWithWhereWithoutCompetenceInput | TagUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type CompetenceCreateNestedOneWithoutNiveauxInput = {
    create?: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutNiveauxInput
    connect?: CompetenceWhereUniqueInput
  }

  export type CompetenceUpdateOneRequiredWithoutNiveauxNestedInput = {
    create?: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutNiveauxInput
    upsert?: CompetenceUpsertWithoutNiveauxInput
    connect?: CompetenceWhereUniqueInput
    update?: XOR<XOR<CompetenceUpdateToOneWithWhereWithoutNiveauxInput, CompetenceUpdateWithoutNiveauxInput>, CompetenceUncheckedUpdateWithoutNiveauxInput>
  }

  export type CompetenceCreateNestedOneWithoutTagsInput = {
    create?: XOR<CompetenceCreateWithoutTagsInput, CompetenceUncheckedCreateWithoutTagsInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutTagsInput
    connect?: CompetenceWhereUniqueInput
  }

  export type CompetenceUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<CompetenceCreateWithoutTagsInput, CompetenceUncheckedCreateWithoutTagsInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutTagsInput
    upsert?: CompetenceUpsertWithoutTagsInput
    connect?: CompetenceWhereUniqueInput
    update?: XOR<XOR<CompetenceUpdateToOneWithWhereWithoutTagsInput, CompetenceUpdateWithoutTagsInput>, CompetenceUncheckedUpdateWithoutTagsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumStatutUtilisateurFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutUtilisateur | EnumStatutUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.StatutUtilisateur[]
    notIn?: $Enums.StatutUtilisateur[]
    not?: NestedEnumStatutUtilisateurFilter<$PrismaModel> | $Enums.StatutUtilisateur
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumStatutUtilisateurWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutUtilisateur | EnumStatutUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.StatutUtilisateur[]
    notIn?: $Enums.StatutUtilisateur[]
    not?: NestedEnumStatutUtilisateurWithAggregatesFilter<$PrismaModel> | $Enums.StatutUtilisateur
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutUtilisateurFilter<$PrismaModel>
    _max?: NestedEnumStatutUtilisateurFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProfilesCreateWithoutUtilisateursInput = {
    libelle: string
  }

  export type ProfilesUncheckedCreateWithoutUtilisateursInput = {
    id?: number
    libelle: string
  }

  export type ProfilesCreateOrConnectWithoutUtilisateursInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutUtilisateursInput, ProfilesUncheckedCreateWithoutUtilisateursInput>
  }

  export type ProfilesUpsertWithoutUtilisateursInput = {
    update: XOR<ProfilesUpdateWithoutUtilisateursInput, ProfilesUncheckedUpdateWithoutUtilisateursInput>
    create: XOR<ProfilesCreateWithoutUtilisateursInput, ProfilesUncheckedCreateWithoutUtilisateursInput>
    where?: ProfilesWhereInput
  }

  export type ProfilesUpdateToOneWithWhereWithoutUtilisateursInput = {
    where?: ProfilesWhereInput
    data: XOR<ProfilesUpdateWithoutUtilisateursInput, ProfilesUncheckedUpdateWithoutUtilisateursInput>
  }

  export type ProfilesUpdateWithoutUtilisateursInput = {
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilesUncheckedUpdateWithoutUtilisateursInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type UtilisateurCreateWithoutProfileInput = {
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
  }

  export type UtilisateurUncheckedCreateWithoutProfileInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
  }

  export type UtilisateurCreateOrConnectWithoutProfileInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutProfileInput, UtilisateurUncheckedCreateWithoutProfileInput>
  }

  export type UtilisateurCreateManyProfileInputEnvelope = {
    data: UtilisateurCreateManyProfileInput | UtilisateurCreateManyProfileInput[]
  }

  export type UtilisateurUpsertWithWhereUniqueWithoutProfileInput = {
    where: UtilisateurWhereUniqueInput
    update: XOR<UtilisateurUpdateWithoutProfileInput, UtilisateurUncheckedUpdateWithoutProfileInput>
    create: XOR<UtilisateurCreateWithoutProfileInput, UtilisateurUncheckedCreateWithoutProfileInput>
  }

  export type UtilisateurUpdateWithWhereUniqueWithoutProfileInput = {
    where: UtilisateurWhereUniqueInput
    data: XOR<UtilisateurUpdateWithoutProfileInput, UtilisateurUncheckedUpdateWithoutProfileInput>
  }

  export type UtilisateurUpdateManyWithWhereWithoutProfileInput = {
    where: UtilisateurScalarWhereInput
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyWithoutProfileInput>
  }

  export type UtilisateurScalarWhereInput = {
    AND?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
    OR?: UtilisateurScalarWhereInput[]
    NOT?: UtilisateurScalarWhereInput | UtilisateurScalarWhereInput[]
    id?: IntFilter<"Utilisateur"> | number
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    email?: StringFilter<"Utilisateur"> | string
    password?: StringFilter<"Utilisateur"> | string
    login?: StringFilter<"Utilisateur"> | string
    statut?: EnumStatutUtilisateurFilter<"Utilisateur"> | $Enums.StatutUtilisateur
    profileId?: IntFilter<"Utilisateur"> | number
  }

  export type ReferentielCreateWithoutPromotionInput = {
    libelle: string
    description?: string | null
    profilsSortie?: ProfilSortieCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUncheckedCreateWithoutPromotionInput = {
    id?: number
    libelle: string
    description?: string | null
    profilsSortie?: ProfilSortieUncheckedCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielCreateOrConnectWithoutPromotionInput = {
    where: ReferentielWhereUniqueInput
    create: XOR<ReferentielCreateWithoutPromotionInput, ReferentielUncheckedCreateWithoutPromotionInput>
  }

  export type ReferentielCreateManyPromotionInputEnvelope = {
    data: ReferentielCreateManyPromotionInput | ReferentielCreateManyPromotionInput[]
  }

  export type ReferentielUpsertWithWhereUniqueWithoutPromotionInput = {
    where: ReferentielWhereUniqueInput
    update: XOR<ReferentielUpdateWithoutPromotionInput, ReferentielUncheckedUpdateWithoutPromotionInput>
    create: XOR<ReferentielCreateWithoutPromotionInput, ReferentielUncheckedCreateWithoutPromotionInput>
  }

  export type ReferentielUpdateWithWhereUniqueWithoutPromotionInput = {
    where: ReferentielWhereUniqueInput
    data: XOR<ReferentielUpdateWithoutPromotionInput, ReferentielUncheckedUpdateWithoutPromotionInput>
  }

  export type ReferentielUpdateManyWithWhereWithoutPromotionInput = {
    where: ReferentielScalarWhereInput
    data: XOR<ReferentielUpdateManyMutationInput, ReferentielUncheckedUpdateManyWithoutPromotionInput>
  }

  export type ReferentielScalarWhereInput = {
    AND?: ReferentielScalarWhereInput | ReferentielScalarWhereInput[]
    OR?: ReferentielScalarWhereInput[]
    NOT?: ReferentielScalarWhereInput | ReferentielScalarWhereInput[]
    id?: IntFilter<"Referentiel"> | number
    libelle?: StringFilter<"Referentiel"> | string
    description?: StringNullableFilter<"Referentiel"> | string | null
    promotionId?: IntFilter<"Referentiel"> | number
  }

  export type PromotionCreateWithoutReferentielsInput = {
    date_debut: Date | string
    duree: string
  }

  export type PromotionUncheckedCreateWithoutReferentielsInput = {
    id?: number
    date_debut: Date | string
    duree: string
  }

  export type PromotionCreateOrConnectWithoutReferentielsInput = {
    where: PromotionWhereUniqueInput
    create: XOR<PromotionCreateWithoutReferentielsInput, PromotionUncheckedCreateWithoutReferentielsInput>
  }

  export type ProfilSortieCreateWithoutReferentielInput = {
    libelle: string
    description?: string | null
  }

  export type ProfilSortieUncheckedCreateWithoutReferentielInput = {
    id?: number
    libelle: string
    description?: string | null
  }

  export type ProfilSortieCreateOrConnectWithoutReferentielInput = {
    where: ProfilSortieWhereUniqueInput
    create: XOR<ProfilSortieCreateWithoutReferentielInput, ProfilSortieUncheckedCreateWithoutReferentielInput>
  }

  export type ProfilSortieCreateManyReferentielInputEnvelope = {
    data: ProfilSortieCreateManyReferentielInput | ProfilSortieCreateManyReferentielInput[]
  }

  export type PromotionUpsertWithoutReferentielsInput = {
    update: XOR<PromotionUpdateWithoutReferentielsInput, PromotionUncheckedUpdateWithoutReferentielsInput>
    create: XOR<PromotionCreateWithoutReferentielsInput, PromotionUncheckedCreateWithoutReferentielsInput>
    where?: PromotionWhereInput
  }

  export type PromotionUpdateToOneWithWhereWithoutReferentielsInput = {
    where?: PromotionWhereInput
    data: XOR<PromotionUpdateWithoutReferentielsInput, PromotionUncheckedUpdateWithoutReferentielsInput>
  }

  export type PromotionUpdateWithoutReferentielsInput = {
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionUncheckedUpdateWithoutReferentielsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilSortieUpsertWithWhereUniqueWithoutReferentielInput = {
    where: ProfilSortieWhereUniqueInput
    update: XOR<ProfilSortieUpdateWithoutReferentielInput, ProfilSortieUncheckedUpdateWithoutReferentielInput>
    create: XOR<ProfilSortieCreateWithoutReferentielInput, ProfilSortieUncheckedCreateWithoutReferentielInput>
  }

  export type ProfilSortieUpdateWithWhereUniqueWithoutReferentielInput = {
    where: ProfilSortieWhereUniqueInput
    data: XOR<ProfilSortieUpdateWithoutReferentielInput, ProfilSortieUncheckedUpdateWithoutReferentielInput>
  }

  export type ProfilSortieUpdateManyWithWhereWithoutReferentielInput = {
    where: ProfilSortieScalarWhereInput
    data: XOR<ProfilSortieUpdateManyMutationInput, ProfilSortieUncheckedUpdateManyWithoutReferentielInput>
  }

  export type ProfilSortieScalarWhereInput = {
    AND?: ProfilSortieScalarWhereInput | ProfilSortieScalarWhereInput[]
    OR?: ProfilSortieScalarWhereInput[]
    NOT?: ProfilSortieScalarWhereInput | ProfilSortieScalarWhereInput[]
    id?: IntFilter<"ProfilSortie"> | number
    libelle?: StringFilter<"ProfilSortie"> | string
    description?: StringNullableFilter<"ProfilSortie"> | string | null
    referentielId?: IntFilter<"ProfilSortie"> | number
  }

  export type ReferentielCreateWithoutProfilsSortieInput = {
    libelle: string
    description?: string | null
    promotion: PromotionCreateNestedOneWithoutReferentielsInput
  }

  export type ReferentielUncheckedCreateWithoutProfilsSortieInput = {
    id?: number
    libelle: string
    description?: string | null
    promotionId: number
  }

  export type ReferentielCreateOrConnectWithoutProfilsSortieInput = {
    where: ReferentielWhereUniqueInput
    create: XOR<ReferentielCreateWithoutProfilsSortieInput, ReferentielUncheckedCreateWithoutProfilsSortieInput>
  }

  export type ReferentielUpsertWithoutProfilsSortieInput = {
    update: XOR<ReferentielUpdateWithoutProfilsSortieInput, ReferentielUncheckedUpdateWithoutProfilsSortieInput>
    create: XOR<ReferentielCreateWithoutProfilsSortieInput, ReferentielUncheckedCreateWithoutProfilsSortieInput>
    where?: ReferentielWhereInput
  }

  export type ReferentielUpdateToOneWithWhereWithoutProfilsSortieInput = {
    where?: ReferentielWhereInput
    data: XOR<ReferentielUpdateWithoutProfilsSortieInput, ReferentielUncheckedUpdateWithoutProfilsSortieInput>
  }

  export type ReferentielUpdateWithoutProfilsSortieInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    promotion?: PromotionUpdateOneRequiredWithoutReferentielsNestedInput
  }

  export type ReferentielUncheckedUpdateWithoutProfilsSortieInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    promotionId?: IntFieldUpdateOperationsInput | number
  }

  export type NiveauCreateWithoutCompetenceInput = {
    libelle: string
  }

  export type NiveauUncheckedCreateWithoutCompetenceInput = {
    id?: number
    libelle: string
  }

  export type NiveauCreateOrConnectWithoutCompetenceInput = {
    where: NiveauWhereUniqueInput
    create: XOR<NiveauCreateWithoutCompetenceInput, NiveauUncheckedCreateWithoutCompetenceInput>
  }

  export type NiveauCreateManyCompetenceInputEnvelope = {
    data: NiveauCreateManyCompetenceInput | NiveauCreateManyCompetenceInput[]
  }

  export type TagCreateWithoutCompetenceInput = {
    libelle: string
    description?: string | null
  }

  export type TagUncheckedCreateWithoutCompetenceInput = {
    id?: number
    libelle: string
    description?: string | null
  }

  export type TagCreateOrConnectWithoutCompetenceInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCompetenceInput, TagUncheckedCreateWithoutCompetenceInput>
  }

  export type TagCreateManyCompetenceInputEnvelope = {
    data: TagCreateManyCompetenceInput | TagCreateManyCompetenceInput[]
  }

  export type NiveauUpsertWithWhereUniqueWithoutCompetenceInput = {
    where: NiveauWhereUniqueInput
    update: XOR<NiveauUpdateWithoutCompetenceInput, NiveauUncheckedUpdateWithoutCompetenceInput>
    create: XOR<NiveauCreateWithoutCompetenceInput, NiveauUncheckedCreateWithoutCompetenceInput>
  }

  export type NiveauUpdateWithWhereUniqueWithoutCompetenceInput = {
    where: NiveauWhereUniqueInput
    data: XOR<NiveauUpdateWithoutCompetenceInput, NiveauUncheckedUpdateWithoutCompetenceInput>
  }

  export type NiveauUpdateManyWithWhereWithoutCompetenceInput = {
    where: NiveauScalarWhereInput
    data: XOR<NiveauUpdateManyMutationInput, NiveauUncheckedUpdateManyWithoutCompetenceInput>
  }

  export type NiveauScalarWhereInput = {
    AND?: NiveauScalarWhereInput | NiveauScalarWhereInput[]
    OR?: NiveauScalarWhereInput[]
    NOT?: NiveauScalarWhereInput | NiveauScalarWhereInput[]
    id?: IntFilter<"Niveau"> | number
    libelle?: StringFilter<"Niveau"> | string
    competenceId?: IntFilter<"Niveau"> | number
  }

  export type TagUpsertWithWhereUniqueWithoutCompetenceInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutCompetenceInput, TagUncheckedUpdateWithoutCompetenceInput>
    create: XOR<TagCreateWithoutCompetenceInput, TagUncheckedCreateWithoutCompetenceInput>
  }

  export type TagUpdateWithWhereUniqueWithoutCompetenceInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutCompetenceInput, TagUncheckedUpdateWithoutCompetenceInput>
  }

  export type TagUpdateManyWithWhereWithoutCompetenceInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutCompetenceInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    id?: IntFilter<"Tag"> | number
    libelle?: StringFilter<"Tag"> | string
    description?: StringNullableFilter<"Tag"> | string | null
    competenceId?: IntFilter<"Tag"> | number
  }

  export type CompetenceCreateWithoutNiveauxInput = {
    libelle: string
    description?: string | null
    tags?: TagCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateWithoutNiveauxInput = {
    id?: number
    libelle: string
    description?: string | null
    tags?: TagUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceCreateOrConnectWithoutNiveauxInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
  }

  export type CompetenceUpsertWithoutNiveauxInput = {
    update: XOR<CompetenceUpdateWithoutNiveauxInput, CompetenceUncheckedUpdateWithoutNiveauxInput>
    create: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
    where?: CompetenceWhereInput
  }

  export type CompetenceUpdateToOneWithWhereWithoutNiveauxInput = {
    where?: CompetenceWhereInput
    data: XOR<CompetenceUpdateWithoutNiveauxInput, CompetenceUncheckedUpdateWithoutNiveauxInput>
  }

  export type CompetenceUpdateWithoutNiveauxInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: TagUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateWithoutNiveauxInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: TagUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceCreateWithoutTagsInput = {
    libelle: string
    description?: string | null
    niveaux?: NiveauCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateWithoutTagsInput = {
    id?: number
    libelle: string
    description?: string | null
    niveaux?: NiveauUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceCreateOrConnectWithoutTagsInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutTagsInput, CompetenceUncheckedCreateWithoutTagsInput>
  }

  export type CompetenceUpsertWithoutTagsInput = {
    update: XOR<CompetenceUpdateWithoutTagsInput, CompetenceUncheckedUpdateWithoutTagsInput>
    create: XOR<CompetenceCreateWithoutTagsInput, CompetenceUncheckedCreateWithoutTagsInput>
    where?: CompetenceWhereInput
  }

  export type CompetenceUpdateToOneWithWhereWithoutTagsInput = {
    where?: CompetenceWhereInput
    data: XOR<CompetenceUpdateWithoutTagsInput, CompetenceUncheckedUpdateWithoutTagsInput>
  }

  export type CompetenceUpdateWithoutTagsInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: NiveauUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: NiveauUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type UtilisateurCreateManyProfileInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    password: string
    login: string
    statut: $Enums.StatutUtilisateur
  }

  export type UtilisateurUpdateWithoutProfileInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
  }

  export type UtilisateurUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
  }

  export type UtilisateurUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutUtilisateurFieldUpdateOperationsInput | $Enums.StatutUtilisateur
  }

  export type ReferentielCreateManyPromotionInput = {
    id?: number
    libelle: string
    description?: string | null
  }

  export type ReferentielUpdateWithoutPromotionInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilsSortie?: ProfilSortieUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateWithoutPromotionInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profilsSortie?: ProfilSortieUncheckedUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateManyWithoutPromotionInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilSortieCreateManyReferentielInput = {
    id?: number
    libelle: string
    description?: string | null
  }

  export type ProfilSortieUpdateWithoutReferentielInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilSortieUncheckedUpdateWithoutReferentielInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfilSortieUncheckedUpdateManyWithoutReferentielInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NiveauCreateManyCompetenceInput = {
    id?: number
    libelle: string
  }

  export type TagCreateManyCompetenceInput = {
    id?: number
    libelle: string
    description?: string | null
  }

  export type NiveauUpdateWithoutCompetenceInput = {
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type NiveauUncheckedUpdateWithoutCompetenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type NiveauUncheckedUpdateManyWithoutCompetenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type TagUpdateWithoutCompetenceInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutCompetenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyWithoutCompetenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}